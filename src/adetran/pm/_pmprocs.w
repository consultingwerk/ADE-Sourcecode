&ANALYZE-SUSPEND _VERSION-NUMBER UIB_v8r11 GUI
&ANALYZE-RESUME
&Scoped-define WINDOW-NAME WINDOW-1
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS WINDOW-1 
/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation. All rights    *
* reserved. Prior versions of this work may contain portions         *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/
/*

Procedure:    adetran/pm/_pmprocs.w
Author:       R. Ryan
Created:      1/95 
Updated:      9/95
		11/96 SLK lc/caps
			entry ","
		01/97 SLK Restored image area = image size
Purpose:      Translation Manager's Procedure Tab folder
Background:   This is a persistent procedure that is run from
              pm/_pmmain.p *only* after a database is connected.
              Once connected, this procedure has the browser
              associated and buttons associated with defining and
              maintaining source code.
Note:         This is very complex procedure, so take care to
              understand how and why it works as it does. 
                                         
Includes:     adecomm/dirsrch.i     P. Tullman's DLL for returning files
                                    for a given directory/file filter(s)
              adecomm/fileinfo.i    T. Texin's DLL for returning file
                                    characters for a given filename  
                                   
Called by:    pm/_pmmain.p 

Calls to:     SetSensitivity        Sets sensitivity of buttons in this persistent
                                    procedure
              FindProcedures        Run OS-DIR (dir) 
                                    returns a list of procedures for a directory.
                                    then runs file_info (from fileinfo.dll) and
                                    returns file characteristics.  Creates records and
                                    assigns values for XL_Procedures.
              LoadFileInfo          
              ProcessOptions        runs pm/_scan.w, then evaluates the options
                                    selected, then updates the 'NeedsExtracting'
                                    field, or adds/deletes procedures.
              OpenQuery in _hTrans  Opens the 3-way join query in the data tab
              pm/_scan.w            See ProcessOptions
              pm/_newfile.w         Adds the files for an entire directory, all
                                    the files for the 1st level subdirectories, or
                                    a single file.
              adecomm/_pwmain.p     Invokes the 'little' editor.             
              
*/


{ adetran/pm/tranhelp.i } /* definitions for help context strings */  
/* Temporary files generated by _sort.w and _order.w.                */
/* If these are blank then the regular OpenQuery internal procedures */
/* are run, otherwise these will be run                              */
DEFINE SHARED VARIABLE TmpFl_PM_Ss      AS CHARACTER     NO-UNDO.
{adetran/pm/vsubset.i &NEW=" " &SHARED="SHARED"}

DEFINE SHARED VARIABLE _hMain           AS HANDLE        NO-UNDO.
DEFINE SHARED VARIABLE _MainWindow      AS WIDGET-HANDLE NO-UNDO.
DEFINE SHARED VARIABLE _hTrans          AS HANDLE        NO-UNDO.   
DEFINE SHARED VARIABLE CurrentMode      AS INTEGER       NO-UNDO.   
DEFINE SHARED VARIABLE _AddProcWarnings AS LOGICAL       NO-UNDO.  
DEFINE SHARED VARIABLE ProjectDB        AS CHARACTER     NO-UNDO.

/*
** DLL declarations and variables specific to DLL calls
*/
{adecomm/dirsrch.i}
DEFINE VARIABLE FileSize     AS INTEGER                 NO-UNDO.
DEFINE VARIABLE ModDate      AS DATE                    NO-UNDO.
DEFINE VARIABLE ModTime      AS CHARACTER               NO-UNDO.

{adecomm/fileinfo.i} 
{adecomm/cbvar.i}  
DEFINE VARIABLE CurFilter    AS CHARACTER               NO-UNDO.
DEFINE VARIABLE file-year    AS INTEGER                 NO-UNDO.
DEFINE VARIABLE file-mon     AS INTEGER                 NO-UNDO.
DEFINE VARIABLE file-day     AS INTEGER                 NO-UNDO.
DEFINE VARIABLE file-hour    AS INTEGER                 NO-UNDO.
DEFINE VARIABLE file-min     AS INTEGER                 NO-UNDO.
DEFINE VARIABLE file-sec     AS INTEGER                 NO-UNDO.
DEFINE VARIABLE file-size    AS INTEGER                 NO-UNDO.
DEFINE VARIABLE error        AS INTEGER                 NO-UNDO.

DEFINE VARIABLE i            AS INTEGER                 NO-UNDO.
DEFINE VARIABLE cTemp        AS CHARACTER               NO-UNDO.
DEFINE VARIABLE NumProcs     AS INTEGER                 NO-UNDO.
DEFINE VARIABLE Result       AS LOGICAL                 NO-UNDO. 
DEFINE VARIABLE OKPressed    AS LOGICAL                 NO-UNDO.
DEFINE VARIABLE ErrorStatus  AS LOGICAL                 NO-UNDO.
DEFINE VARIABLE ThisMessage  AS CHARACTER               NO-UNDO.

DEFINE VARIABLE listCnt      AS INTEGER                 NO-UNDO.
DEFINE VARIABLE WildCardItem AS CHARACTER               NO-UNDO.

DEFINE TEMP-TABLE tt-list-char
   FIELD sequence_num AS INTEGER
   FIELD list-char AS CHARACTER
INDEX sequence IS PRIMARY UNIQUE sequence_num
INDEX name list-char.

DEFINE TEMP-TABLE ttDir NO-UNDO
   FIELD Directory AS CHARACTER
INDEX Dir IS PRIMARY Directory.

DEFINE VARIABLE lIncludeSubDirs AS LOGICAL NO-UNDO.

&IF LOOKUP("{&OPSYS}","MSDOS,WIN32":U) > 0 &THEN
    &SCOPED-DEFINE SLASH ~~~\
&ELSE
    &SCOPED-DEFINE SLASH /
&ENDIF

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-PREPROCESSOR-BLOCK 

/* ********************  Preprocessor Definitions  ******************** */

&Scoped-define PROCEDURE-TYPE WINDOW

/* Name of first Frame and/or Browse and/or first Query                 */
&Scoped-define FRAME-NAME ProcsFrame
&Scoped-define BROWSE-NAME ProcsBrowser

/* Internal Tables (found by Frame, Query & Browse Queries)             */
&Scoped-define INTERNAL-TABLES xlatedb.XL_Procedure xlatedb.XL_Project

/* Definitions for BROWSE ProcsBrowser                                  */
&Scoped-define FIELDS-IN-QUERY-ProcsBrowser xlatedb.XL_Procedure.FileName xlatedb.XL_Procedure.UpdateDateTime xlatedb.XL_Procedure.FileSize xlatedb.XL_Procedure.CurrentStatus xlatedb.XL_Procedure.ResourceFileGenerated xlatedb.XL_Procedure.Comments   
&Scoped-define ENABLED-FIELDS-IN-QUERY-ProcsBrowser xlatedb.XL_Procedure.Comments   
&Scoped-define FIELD-PAIRS-IN-QUERY-ProcsBrowser~
 ~{&FP1}Comments ~{&FP2}Comments ~{&FP3}
&Scoped-define ENABLED-TABLES-IN-QUERY-ProcsBrowser xlatedb.XL_Procedure
&Scoped-define FIRST-ENABLED-TABLE-IN-QUERY-ProcsBrowser xlatedb.XL_Procedure
&Scoped-define SELF-NAME ProcsBrowser
&Scoped-define OPEN-QUERY-ProcsBrowser OPEN QUERY {&SELF-NAME} FOR EACH xlatedb.XL_Procedure WHERE TRUE /* Join to xlatedb.XL_Project incomplete */ SHARE-LOCK.
&Scoped-define TABLES-IN-QUERY-ProcsBrowser xlatedb.XL_Procedure
&Scoped-define FIRST-TABLE-IN-QUERY-ProcsBrowser xlatedb.XL_Procedure


/* Definitions for FRAME ProcsFrame                                     */
&Scoped-define OPEN-QUERY-ProcsFrame OPEN QUERY ProcsFrame FOR EACH xlatedb.XL_Project SHARE-LOCK.
&Scoped-define TABLES-IN-QUERY-ProcsFrame xlatedb.XL_Project
&Scoped-define FIRST-TABLE-IN-QUERY-ProcsFrame xlatedb.XL_Project


/* Standard List Definitions                                            */
&Scoped-Define ENABLED-OBJECTS RECT-1 AppDirLabel CurDirLabel BtnAdd ~
ProcsBrowser BtnRemove DirLabel BtnUpdate DirList BtnEdit FiltersLabel ~
WildCardExp 
&Scoped-Define DISPLAYED-OBJECTS AppDirLabel CurDirLabel DirLabel DirList ~
FiltersLabel WildCardExp 

/* Custom List Definitions                                              */
/* List-1,List-2,List-3,List-4,List-5,List-6                            */

/* _UIB-PREPROCESSOR-BLOCK-END */
&ANALYZE-RESUME



/* ***********************  Control Definitions  ********************** */

/* Define the widget handle for the window                              */
DEFINE VAR WINDOW-1 AS WIDGET-HANDLE NO-UNDO.

/* Definitions of the field level widgets                               */
DEFINE BUTTON BtnAdd 
     LABEL "&Add...." 
     SIZE-PIXELS 90 BY 23.

DEFINE BUTTON BtnEdit 
     LABEL "&Edit" 
     SIZE-PIXELS 90 BY 23.

DEFINE BUTTON BtnRemove 
     LABEL "&Remove" 
     SIZE-PIXELS 90 BY 23.

DEFINE BUTTON BtnUpdate 
     LABEL "&Scan..." 
     SIZE-PIXELS 90 BY 23.

DEFINE VARIABLE WildCardExp AS CHARACTER FORMAT "X(250)":U
     VIEW-AS FILL-IN
     SIZE-PIXELS 170 BY 22 NO-UNDO.

DEFINE VARIABLE FiltersList AS CHARACTER FORMAT "X(250)":U 
     VIEW-AS SELECTION-LIST
     LIST-ITEMS "List-Item" SCROLLBAR-VERTICAL
     SIZE-PIXELS 195 BY 60 NO-UNDO.
     
DEFINE BUTTON FiltBtn IMAGE-UP FILE "btn-down-arrow" SIZE-PIXELS 22 BY 22.

DEFINE VARIABLE AppDir AS CHARACTER 
     VIEW-AS EDITOR
     SIZE-PIXELS 189 BY 22
     .

DEFINE VARIABLE AppDirLabel AS CHARACTER FORMAT "X(250)":U INITIAL "Source Directory:" 
      VIEW-AS TEXT 
     SIZE-PIXELS 189 BY 22 NO-UNDO.

DEFINE VARIABLE CurDirLabel AS CHARACTER FORMAT "X(250)":U INITIAL "Current Directory" 
      VIEW-AS TEXT 
     SIZE-PIXELS 228 BY 22 NO-UNDO.

DEFINE VARIABLE DirLabel AS CHARACTER FORMAT "X(250)":U INITIAL "&Directories" 
      VIEW-AS TEXT 
     SIZE-PIXELS 189 BY 22 NO-UNDO.

DEFINE VARIABLE FiltersLabel AS CHARACTER FORMAT "X(250)":U INITIAL "List Files Of &Type:" 
      VIEW-AS TEXT 
     SIZE-PIXELS 189 BY 22 NO-UNDO.

DEFINE RECTANGLE RECT-1
     EDGE-PIXELS 2 GRAPHIC-EDGE  NO-FILL 
     SIZE-PIXELS 469 BY 275.

DEFINE VARIABLE DirList AS CHARACTER 
     VIEW-AS SELECTION-LIST SINGLE SCROLLBAR-VERTICAL 
     SCROLLBAR-HORIZONTAL 
     SIZE-PIXELS 189 BY 136 NO-UNDO.

/* Query definitions                                                    */
&ANALYZE-SUSPEND
DEFINE QUERY ProcsBrowser FOR 
      xlatedb.XL_Procedure SCROLLING.

DEFINE QUERY ProcsFrame FOR 
      xlatedb.XL_Project SCROLLING.
&ANALYZE-RESUME

/* Browse definitions                                                   */
/* Always only filename - no path */
DEFINE BROWSE ProcsBrowser
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _DISPLAY-FIELDS ProcsBrowser WINDOW-1 _FREEFORM
  QUERY ProcsBrowser SHARE-LOCK NO-WAIT DISPLAY
      xlatedb.XL_Procedure.FileName WIDTH 20 FORMAT "x(256)"
      xlatedb.XL_Procedure.UpdateDateTime
      xlatedb.XL_Procedure.FileSize COLUMN-LABEL "File!Size"
      xlatedb.XL_Procedure.CurrentStatus COLUMN-LABEL "Status of!Last Kit"
      xlatedb.XL_Procedure.ResourceFileGenerated  COLUMN-LABEL "Resource!Generated"
      xlatedb.XL_Procedure.Comments COLUMN-LABEL "!Comments" FORMAT "X(80)" WIDTH 19
  ENABLE
      xlatedb.XL_Procedure.FileName
      xlatedb.XL_Procedure.Comments
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME
    WITH SEPARATORS MULTIPLE
          &IF '{&WINDOW-SYSTEM}' = 'TTY':U &THEN SIZE 32 BY 9
          &ELSE SIZE-PIXELS 227 BY 235 &ENDIF
         FONT 4.


/* ************************  Frame Definitions  *********************** */

DEFINE FRAME ProcsFrame
     FiltersLabel AT Y 13 X 16 COLON-ALIGNED NO-LABEL
     WildCardExp AT Y 37 X 16 COLON-ALIGNED NO-LABEL
     FiltBtn NO-LABEL
     FiltersList NO-LABEL
     CurDirLabel AT Y 12 X 237 NO-LABEL
     BtnAdd AT Y 8 X 498
     ProcsBrowser AT Y 37 X 237
     BtnRemove AT Y 35 X 498
     AppDirLabel AT Y 66 X 16 COLON-ALIGNED NO-LABEL
     AppDir AT Y 90 X 16 COLON-ALIGNED NO-LABEL
     BtnUpdate AT Y 62 X 498
     DirLabel AT Y 118 X 16 COLON-ALIGNED NO-LABEL
     DirList AT Y 136 X 16 COLON-ALIGNED NO-LABEL
     BtnEdit AT Y 89 X 498
     RECT-1 AT Y 8 X 12
    WITH 1 DOWN NO-BOX OVERLAY 
         SIDE-LABELS NO-UNDERLINE THREE-D 
         AT X 14 Y 52
         SIZE-PIXELS 602 BY 299
         FONT 4.

                  

/* *********************** Procedure Settings ************************ */

&ANALYZE-SUSPEND _PROCEDURE-SETTINGS
/* Settings for THIS-PROCEDURE
   Type: WINDOW
   Other Settings: COMPILE
 */
&ANALYZE-RESUME _END-PROCEDURE-SETTINGS

/* *************************  Create Window  ************************** */

&ANALYZE-SUSPEND _CREATE-WINDOW
/* SUPPRESS Window definition (used by the UIB) 
IF SESSION:DISPLAY-TYPE = "GUI":U THEN
  CREATE WINDOW WINDOW-1 ASSIGN
         HIDDEN             = YES
         TITLE              = ""
         COLUMN             = 18.72
         ROW                = 6.88
         HEIGHT             = 13.77
         WIDTH              = 95.72
         MAX-HEIGHT         = 22
         MAX-WIDTH          = 95.72
         VIRTUAL-HEIGHT     = 22
         VIRTUAL-WIDTH      = 95.72
         RESIZE             = yes
         SCROLL-BARS        = yes
         STATUS-AREA        = no
         BGCOLOR            = ?
         FGCOLOR            = ?
         KEEP-FRAME-Z-ORDER = yes
         THREE-D            = yes
         MESSAGE-AREA       = no
         SENSITIVE          = yes.
ELSE {&WINDOW-NAME} = CURRENT-WINDOW.
                                                                        */
&ANALYZE-RESUME
ASSIGN WINDOW-1 = CURRENT-WINDOW.



/* ***************  Runtime Attributes and UIB Settings  ************** */

&ANALYZE-SUSPEND _RUN-TIME-ATTRIBUTES
/* SETTINGS FOR WINDOW WINDOW-1
  VISIBLE,,RUN-PERSISTENT                                               */
/* SETTINGS FOR FRAME ProcsFrame
   L-To-R                                                               */
/* SETTINGS FOR EDITOR AppDir IN FRAME ProcsFrame
   NO-DISPLAY NO-ENABLE                                                 */
/* SETTINGS FOR FILL-IN CurDirLabel IN FRAME ProcsFrame
   ALIGN-L                                                              */
ASSIGN 
       ProcsBrowser:NUM-LOCKED-COLUMNS IN FRAME ProcsFrame = 1.

/* _RUN-TIME-ATTRIBUTES-END */
&ANALYZE-RESUME


/* Setting information for Queries and Browse Widgets fields            */

&ANALYZE-SUSPEND _QUERY-BLOCK BROWSE ProcsBrowser
/* Query rebuild information for BROWSE ProcsBrowser
     _START_FREEFORM
OPEN QUERY {&SELF-NAME} FOR EACH xlatedb.XL_Procedure WHERE TRUE /* Join to xlatedb.XL_Project incomplete */ SHARE-LOCK.
     _END_FREEFORM
     _Options          = "SHARE-LOCK"
     _Query            is NOT OPENED
*/  /* BROWSE ProcsBrowser */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _QUERY-BLOCK FRAME ProcsFrame
/* Query rebuild information for FRAME ProcsFrame
     _TblList          = "xlatedb.XL_Project"
     _Query            is OPENED
*/  /* FRAME ProcsFrame */
&ANALYZE-RESUME

 




/* ************************  Control Triggers  ************************ */

&Scoped-define SELF-NAME ProcsFrame
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL ProcsFrame WINDOW-1
ON HELP OF FRAME ProcsFrame
DO:
  run adecomm/_adehelp.p ("tran":u,"context":u,{&procedures_tab_folder}, ?). 
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME BtnAdd
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL BtnAdd WINDOW-1
ON CHOOSE OF BtnAdd IN FRAME ProcsFrame /* Add.... */
DO:    
  DEFINE VARIABLE FileList AS CHARACTER                          NO-UNDO.
  DEFINE VARIABLE FileType AS CHARACTER                          NO-UNDO.
  DEFINE VARIABLE DirName  AS CHARACTER                          NO-UNDO.
  DEFINE VARIABLE BaseName AS CHARACTER                          NO-UNDO.
  DEFINE VARIABLE num-dirs AS INTEGER                            NO-UNDO.

  RUN adecomm/_setcurs.p ("WAIT":U).
  RUN adetran/pm/_newfile.w (INPUT DirList:list-items, OUTPUT FileList,
                             OUTPUT FileType, OUTPUT OKPressed).
  IF NOT OKPressed THEN RETURN.

  IF FileType = "D":U THEN DO:
    /* This is 1 or more directory(s)  */
    num-dirs = NUM-ENTRIES(FileList,",":U).
    DO i = 1 TO num-dirs:
       run FindProcedures (INPUT entry(i,FileList,",":U), INPUT num-dirs, OUTPUT NumProcs).
       if NumProcs > 0 then 
       result = DirList:add-first(entry(i,FileList,",":U)).
    end.
  end.

  else do:   
    /* This is a single file  */
    run adecomm/_osprefx.p (FileList, OUTPUT DirName, OUTPUT BaseName).  
    assign                                
      DirName  = right-trim(DirName,"\":U)
      file-info:filename = FileList.
      
    
    if DirName = "":U then DirName = ".":U.  
    
    run FindFileInfo (
        INPUT trim(file-info:full-pathname),
        OUTPUT FileSize,
        OUTPUT ModDate,
        OUTPUT ModTime,
        OUTPUT ErrorStatus).

    ASSIGN DirName = TRIM(DirName)
           BaseName = TRIM(BaseName).
    IF CAN-FIND(FIRST xlatedb.XL_Procedure WHERE
                xlatedb.XL_Procedure.Directory = DirName AND
                xlatedb.XL_Procedure.FileName = BaseName) THEN DO:
      ThisMessage = "File: " +
                    (IF DirName = ".":U THEN "":U ELSE DirName + "{&SLASH}") + BaseName +
                    "^is already included.  It is not being added.".
      run adecomm/_s-alert.p(input-output ErrorStatus, "w":U, "ok":U, ThisMessage).
      RETURN.
    END.

    create xlatedb.XL_Procedure.
    assign        
      xlatedb.XL_Procedure.Directory             = DirName                  
      xlatedb.XL_Procedure.FileName              = BaseName
      xlatedb.XL_Procedure.CurrentStatus         = "- - -":U
      xlatedb.XL_Procedure.ResourceFileGenerated = no
      xlatedb.XL_Procedure.UpdateDateTime        = string(ModDate) + "  ":U + ModTime
      xlatedb.XL_Procedure.FileSize              = FileSize
      xlatedb.XL_Procedure.NeedsExtracting       = true.

  END.  /* Else DO: - we are adding a single file */
  run Realize.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME BtnEdit
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL BtnEdit WINDOW-1
ON CHOOSE OF BtnEdit IN FRAME ProcsFrame /* Edit */
DO: 
  DEFINE VARIABLE pFileName as char NO-UNDO.  
  DEFINE VARIABLE DirName   as char NO-UNDO.  
  
  if ProcsBrowser:num-selected-rows = 0 then do:
    ThisMessage = "You haven't selected a procedure to edit.".
    run adecomm/_s-alert.p (input-output ErrorStatus, "w":u,"ok":u, ThisMessage). 
    return.
  end.
  /* Construct the full pathname using SourceDir, File Dir, and Filename.
     Trim the period (.) so _osfmush.p returns just the Source Dir.
  */   
  run adecomm/_osfmush.p
      (input  AppDir:screen-value,
       input trim(xlatedb.XL_Procedure.Directory, ".":u),
       output DirName ).
  run adecomm/_osfmush.p
      (input  DirName , input xlatedb.XL_Procedure.FileName,
       output pFileName).
  file-info:filename = pFileName.
  if file-info:full-pathname = ? then do:
    ThisMessage = pFileName + "^This file cannot be found.".
    run adecomm/_s-alert.p (input-output ErrorStatus, "w":u,"ok":u, ThisMessage).  
  end.
  else  
    run adecomm/_pwmain.p ("_tran.p":u, pFileName,"":U).
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL BtnEdit WINDOW-1
ON mouse-select-dblclick OF BtnEdit IN FRAME ProcsFrame /* Edit */
DO: 
  APPLY "CHOOSE":U TO BtnEdit IN FRAME ProcsFrame.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME BtnRemove
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL BtnRemove WINDOW-1
ON CHOOSE OF BtnRemove IN FRAME ProcsFrame /* Remove */
DO:    
  DEFINE VARIABLE ThisDirectory as char NO-UNDO.

  if ProcsBrowser:num-selected-rows = 0 then do:
    ThisMessage = "You haven't selected any procedures to remove.".
    run adecomm/_s-alert.p (input-output ErrorStatus, "w":u,"ok":u, ThisMessage). 
    return.
  end.   
  
  ThisDirectory = xlatedb.XL_Procedure.Directory.
  run adecomm/_setcurs.p ("wait":U).
  do i = ProcsBrowser:num-selected-rows to 1 by -1:      
    result = ProcsBrowser:fetch-selected-row(i).
    /* Delete corresponding Kit-Proc cross-reference records */
    FOR EACH xlatedb.XL_Kit-Proc OF xlatedb.XL_Procedure EXCLUSIVE-LOCK:
      DELETE xlatedb.XL_Kit-Proc.
    END.  /* For each kit-proc record */

    /* Delete corresponding Subset records */
    FIND FIRST bFileList 
       WHERE bFileList.Project   = ProjectDB
         AND bFileList.Directory = xlatedb.XL_Procedure.Directory 
         AND bFileList.FileName  = xlatedb.XL_Procedure.FileName 
       EXCLUSIVE-LOCK NO-ERROR. 
    IF AVAILABLE bFileList THEN DELETE bFileList.
    FIND FIRST bSubsetList 
       WHERE bSubsetList.Project   = ProjectDB
         AND bSubsetList.Directory = xlatedb.XL_Procedure.Directory 
         AND bSubsetList.FileName  = xlatedb.XL_Procedure.FileName 
       EXCLUSIVE-LOCK NO-ERROR. 
    IF AVAILABLE bSubsetList THEN DELETE bSubsetList.

    /* Note that we are storing the subset in the XL_Invalid table */
    FIND FIRST xlatedb.XL_Invalid
       WHERE xlatedb.XL_Invalid.GlossaryName = ThisDirectory 
         AND xlatedb.XL_Invalid.TargetPhrase = xlatedb.XL_Procedure.FileName 
       EXCLUSIVE-LOCK NO-ERROR. 
    IF AVAILABLE xlatedb.XL_Invalid THEN DELETE xlatedb.XL_Invalid.

    DELETE xlatedb.XL_Procedure.
  end.
  result = ProcsBrowser:delete-selected-rows() no-error.  
  IF CurrentMode = 2 THEN RUN Openquery IN _hTrans.
  
  /*
  ** check to see if there is an orphan directory
  */
  find first xlatedb.XL_Procedure where 
    xlatedb.XL_Procedure.Directory = ThisDirectory no-lock no-error.
  if not available xlatedb.XL_Procedure then do: 
    result = DirList:delete(ThisDirectory). 
    if DirList:num-items >= 1 then do:
      DirList:screen-value = DirList:entry(1). 
      apply "value-changed":u to DirList.
    end.
    else assign CurDirLabel:screen-value = "":U.

    /* Delete corresponding Subset records */
    FIND FIRST bDirList WHERE bDirList.Project   = ProjectDB
                          AND bDirList.Directory = ThisDirectory 
       EXCLUSIVE-LOCK NO-ERROR. 
    IF AVAILABLE bDirList THEN DELETE bDirList.
    FIND FIRST bSubsetList WHERE bSubsetList.Project   = ProjectDB
                             AND bSubsetList.Directory = ThisDirectory 
                             AND bSubsetList.FileName  = cAllFiles
       EXCLUSIVE-LOCK NO-ERROR. 
    IF AVAILABLE bSubsetList THEN DELETE bSubsetList.

    /* Note that we are storing the subset in the XL_Invalid table */
    FIND FIRST xlatedb.XL_Invalid
       WHERE xlatedb.XL_Invalid.GlossaryName = ThisDirectory 
         AND xlatedb.XL_Invalid.TargetPhrase = cAllFiles 
       EXCLUSIVE-LOCK NO-ERROR. 
    IF AVAILABLE xlatedb.XL_Invalid THEN DELETE xlatedb.XL_Invalid.
  end.
  run SetSensitivity.
  run adecomm/_setcurs.p ("":U).
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME BtnUpdate
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL BtnUpdate WINDOW-1
ON CHOOSE OF BtnUpdate IN FRAME ProcsFrame /* Scan... */
DO:
  DEFINE VARIABLE Option1 AS LOGICAL                                NO-UNDO.
  DEFINE VARIABLE Option2 AS LOGICAL                                NO-UNDO.
  DEFINE VARIABLE Option3 AS LOGICAL                                NO-UNDO.
  DEFINE VARIABLE Option4 AS LOGICAL                                NO-UNDO.

  RUN adetran/pm/_scan.w (OUTPUT Option1, OUTPUT Option2, OUTPUT Option3,
                          OUTPUT Option4, OUTPUT OKPressed).

  IF NOT OKPressed THEN RETURN.

  IF Option1 OR Option2 OR Option3 OR Option4 THEN
     RUN ProcessOptions (INPUT Option1, INPUT Option2, INPUT Option3,
                         INPUT Option4, OUTPUT NumProcs).
  
  IF NumProcs > 0 THEN RUN SetSensitivity. 
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME DirList
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL DirList WINDOW-1
ON VALUE-CHANGED OF DirList IN FRAME ProcsFrame
DO:
   run OpenQuery.   
   apply "value-changed":u to ProcsBrowser in frame {&frame-name}.      
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME WildCardExp
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL WildCardExp WINDOW-1
ON VALUE-CHANGED OF WildCardExp IN FRAME ProcsFrame
DO:                      
  IF CurFilter NE SELF:SCREEN-VALUE THEN DO:
    run OpenQuery.
    apply "value-changed":u to ProcsBrowser in frame {&frame-name}.
    CurFilter = SELF:SCREEN-VALUE.
  END.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define BROWSE-NAME ProcsBrowser
&Scoped-define SELF-NAME ProcsBrowser
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL ProcsBrowser WINDOW-1
ON VALUE-CHANGED OF ProcsBrowser IN FRAME ProcsFrame
DO:
  ASSIGN
    AppDir:SCREEN-VALUE      = xlatedb.XL_Project.ApplDirectory
    CurDirLabel:SCREEN-VALUE = xlatedb.XL_Procedure.Directory NO-ERROR.
END.

&Scoped-define SELF-NAME xlatedb.XL_Procedure.FileName
ON ANY-KEY of xlatedb.XL_Procedure.FileName IN BROWSE ProcsBrowser
DO: 
  IF NOT CAN-DO("CURSOR-*,END,HOME,TAB",KEYLABEL(LASTKEY)) THEN RETURN NO-APPLY.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&UNDEFINE SELF-NAME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _MAIN-BLOCK WINDOW-1 


THIS-PROCEDURE:CURRENT-WINDOW = {&WINDOW-NAME}.

{adetran/common/noscroll.i}
         
PAUSE 0 BEFORE-HIDE.

MAIN-BLOCK:
DO ON ERROR   UNDO MAIN-BLOCK, LEAVE MAIN-BLOCK
   ON END-KEY UNDO MAIN-BLOCK, LEAVE MAIN-BLOCK:

   IF NOT AVAILABLE xlatedb.xl_project THEN
     FIND FIRST xlatedb.xl_project NO-LOCK NO-ERROR.

   ASSIGN FRAME {&frame-name}:parent      = _MainWindow
          AppDirLabel:side-label-handle   = AppDirLabel:handle
          AppDirLabel:screen-value        = "Source Directory:"
          DirLabel:side-label-handle      = DirLabel:handle
          FiltersLabel:side-label-handle  = FiltersLabel:handle 
          FiltersList:delimiter           = "|":u
          FiltersList:list-items          = "*.p,*.w|*.p|*.w|*.*":u
          CurFilter                       = "*.p,*.w":U
          CurDirLabel:side-label-handle   = CurDirLabel:handle
          ProcsBrowser:num-locked-columns = 1.

   /* This is a "Laura" combo-box */
   {adecomm/cbdropx.i &Frame  = "FRAME ProcsFrame"
                   &CBFill = WildCardExp
                   &CBList = FiltersList
                   &CBBtn  = FiltBtn
                   &CBInit = """*.p,*.w""" }

  ON U1 OF WildCardExp IN FRAME {&FRAME-NAME},
           FiltersList IN FRAME {&FRAME-NAME}  
  DO: /* Disallow "" in the combo box - reset to *.p,*.w */
     IF WildCardExp:SCREEN-VALUE IN FRAME {&FRAME-NAME} = "":U THEN
        WildCardExp:SCREEN-VALUE IN FRAME {&FRAME-NAME} = "*.p,*.w":U.
     RUN OpenQuery.
  END.

  run LoadFileInfo.
END.
{adecomm/_adetool.i}

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


/* **********************  Internal Procedures  *********************** */

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE EnableFrame WINDOW-1 
PROCEDURE EnableFrame :
define input parameter pMode as logical NO-UNDO.
  frame {&frame-name}:sensitive = pMode.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE FindFileInfo WINDOW-1 
PROCEDURE FindFileInfo :
/*
  ** This procedure calls the external fileinfo DLL and returns
  ** a complete date, time, and file size for the file in question
  */
  def input parameter CurFile as char.
  def output parameter FileSize as int.
  def output parameter ModDate as date.
  def output parameter ModTime as char.
  def output parameter ErrorStatus as logical.
           
run file_info (
  input CurFile,
  output file-year,
  output file-mon,
  output file-day,
  output file-hour,
  output file-min,
  output file-sec,
  output file-size,
  output error).                   

  if error > 0 then 
    ErrorStatus = true.
  else do:     
    DEFINE VARIABLE StrDate as char.
    case session:date-format:
      when "dmy":u then
        StrDate = string(file-day,"99":u) + "/":u +
                  string(file-mon,"99":u) + "/":u +
                  substr(string(file-year),3,2,"fixed":u).    
      when "ymd":u then
        StrDate = substr(string(file-year),3,2,"fixed":u) + "/":u +
                  string(file-mon,"99":u) + "/":u +
                  string(file-day,"99":u).
      otherwise assign
        StrDate = string(file-mon,"99":u) + "/":u +
                  string(file-day,"99":u) + "/":u +
                  substr(string(file-year),3,2,"fixed":u).                  
    end case.
  
    assign 
      ModDate     = date(StrDate)
      FileSize    = file-size
      ModTime     = string(file-hour,"99":u) + ":":u +
                    string(file-min,"99":u) + ":":u +
                    string(file-sec,"99":u)
      ErrorStatus = false. 
  end.    
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE FindProcedures WINDOW-1 
PROCEDURE FindProcedures :
  DEFINE INPUT  PARAMETER CurDirectory AS CHARACTER              NO-UNDO.
  DEFINE INPUT  PARAMETER num-dirs     AS INTEGER                NO-UNDO.
  DEFINE OUTPUT PARAMETER NewCnt       AS INTEGER                NO-UNDO.


  DEFINE VARIABLE i            AS INTEGER                        NO-UNDO.
  DEFINE VARIABLE ThisDir      AS CHARACTER                      NO-UNDO.
  DEFINE VARIABLE CurDir       AS CHARACTER                      NO-UNDO.
  DEFINE VARIABLE flnm         AS CHARACTER                      NO-UNDO.
  DEFINE VARIABLE tApplDir     AS CHARACTER                      NO-UNDO.
  DEFINE VARIABLE tDate        AS DATE                           NO-UNDO.
  DEFINE VARIABLE tmpflnm      AS CHARACTER                      NO-UNDO.
  DEFINE VARIABLE tTime        AS CHARACTER                      NO-UNDO.
  DEFINE VARIABLE tIntTime     AS INTEGER                        NO-UNDO.
  DEFINE VARIABLE tModTime     AS INTEGER                        NO-UNDO.

  DEFINE VARIABLE base-name    AS CHARACTER                      NO-UNDO.
  DEFINE VARIABLE full-name    AS CHARACTER                      NO-UNDO.

  ASSIGN listCnt = 0.
  FOR EACH tt-list-char: 
     DELETE tt-list-char. 
  END.

  DO WITH FRAME {&FRAME-NAME}:
    RUN adecomm/_setcurs.p ("WAIT":U).
    /* If AppDir:SCREEN-VALUE end with a COLON append a "\". */
    ASSIGN tApplDir = AppDir:SCREEN-VALUE
           tApplDir = tApplDir +
                      IF R-INDEX(tApplDir,":":U) = LENGTH(tApplDir)
                         THEN "\":U ELSE "":U.
    RUN adecomm/_osfmush.p
        (INPUT tApplDir, INPUT TRIM(CurDirectory, ".":U),
         OUTPUT CurDir).
    ASSIGN CurDirectory       = TRIM(CurDirectory)
           CurFilter          = WildCardExp:SCREEN-VALUE
           FILE-INFO:filename = CurDir
           ThisDir            = FILE-INFO:FULL-PATHNAME.


    INPUT FROM OS-DIR (ThisDir) NO-ATTR-LIST.
    REPEAT:
       IMPORT base-name full-name.
       FILE-INFO:FILE-NAME = full-name.
       IF INDEX(FILE-INFO:FILE-TYPE,"D":U) > 0 THEN /* directory */
       DO: . END.
       ELSE
       DO i = 1 TO NUM-ENTRIES(WildCardExp:SCREEN-VALUE,",":U):
          ASSIGN
            wildCardItem = ENTRY(i,WildCardExp:SCREEN-VALUE,",":U)
            wildCardItem = REPLACE(wildCardItem, ".":U, "~~.":U).
          IF base-name MATCHES WildCardItem THEN
          DO:
             CREATE tt-list-char.
             ASSIGN listCnt = listCnt + 1
                    tt-list-char.sequence_num = listCnt
                    tt-list-char.list-char = base-name.
          END.
       END. /* Go through the wildcard expressions */
    END. /* Repeat */

    FIND FIRST tt-list-char NO-LOCK NO-ERROR.
    IF NOT AVAILABLE tt-list-char THEN 
    DO:
      IF NOT _AddProcWarnings THEN DO:
         ThisMessage =  "No files were found that matched your criteria. " +
                     "Try changing the file type filters.".
         RUN adecomm/_s-alert.p (INPUT-OUTPUT ErrorStatus, "w":U,"ok":U, ThisMessage).
      END.
      RETURN "False":U.
    END.  /* IF no files were found */

    FOR EACH tt-list-char:
      flnm = tt-list-char.list-char.

      /* Don't allow directories 
       * Note that FILE-INFO can return ? for FILE-TYPE or FULL-PATHNAME
       * when there is no permission to access the file etc.
       * The ideal would have been to have file-type = F, but it screened
       * out valid files. 
       */
   
      DO:
      
      /* Don't allow .r's even if user asks for them */
      tmpflnm = REPLACE(flnm,".":U,CHR(3)).
      IF (NOT tmpflnm MATCHES "*":U + CHR(3) + "r":U) THEN DO:
        FIND xlatedb.XL_Procedure
          WHERE xlatedb.XL_Procedure.FileName = flnm
            AND xlatedb.XL_Procedure.Directory = CurDirectory
               EXCLUSIVE-LOCK NO-ERROR.

        ASSIGN cTemp = TRIM(ThisDir) + "{&SLASH}":U + flnm.
        RUN FindFileInfo (
            INPUT  cTemp,
            OUTPUT FileSize,
            OUTPUT ModDate,
            OUTPUT ModTime,
            OUTPUT ErrorStatus).

        IF (NOT AVAILABLE xlatedb.XL_Procedure) THEN DO:
          CREATE xlatedb.XL_Procedure.
          ASSIGN xlatedb.XL_Procedure.Directory             = CurDirectory
                 xlatedb.XL_Procedure.FileName              = flnm
                 xlatedb.XL_Procedure.CurrentStatus         = "- - -":u
                 xlatedb.XL_Procedure.ResourceFileGenerated = NO
                 xlatedb.XL_Procedure.UpdateDateTime        = STRING(ModDate) +
                                                                "  ":U + ModTime
                 xlatedb.XL_Procedure.FileSize              = FileSize
                 xlatedb.XL_Procedure.NeedsExtracting       = TRUE
                 NewCnt                                     = NewCnt + 1.

        END.  /* IF a procedure record was not available */
      END.  /* IF not a .r */
      END.  /* IF a file */
    END. /* FOR EACH tt-list-char */

    ASSIGN CurDirLabel:SCREEN-VALUE = RIGHT-TRIM(CurDirectory,"\":U) + ":":U
           AppDir:SCREEN-VALUE      = xlatedb.xl_Project.ApplDirectory.

    RUN adecomm/_setcurs.p ("":U).

    IF NewCnt >= 1 AND NOT _AddProcWarnings THEN DO:
      ThisMessage = SUBSTITUTE("&1 procedures were added to &2.", NewCnt, ThisDir).
      RUN adecomm/_s-alert.p (INPUT-OUTPUT ErrorStatus, "i*":U, "ok":U, ThisMessage).
      RUN OpenQuery.
    END.  /* If a new procedure was discovered */
    ELSE IF NewCnt >= 1 THEN
      RUN OpenQuery.
    ELSE IF NOT _AddProcWarnings THEN DO:
      ThisMessage = SUBSTITUTE("No new procedures were found in &1.",ThisDir).
      RUN adecomm/_s-alert.p (INPUT-OUTPUT ErrorStatus, "w":U,"ok":U, ThisMessage).
    END.  /* Else do */
  END.  /* DO WITH FRAME {&FRAME-NAME} */
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE HideMe WINDOW-1 
PROCEDURE HideMe :
frame {&frame-name}:hidden = true.          
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE OpenQuery WINDOW-1 
PROCEDURE OpenQuery :
DO WITH FRAME {&FRAME-NAME}:    
  DEFINE VARIABLE MaxGuess    AS INTEGER                  NO-UNDO.
  DEFINE VARIABLE stupid      AS LOGICAL                  NO-UNDO.
  DEFINE VARIABLE cTemp       AS CHARACTER                NO-UNDO.
  
  ASSIGN WildCardExp.
  
  IF FiltersList:LOOKUP(WildCardExp) = 0 THEN
    stupid = FiltersList:ADD-FIRST(WildCardExp).
  
  FIND FIRST xlatedb.XL_Project NO-ERROR.
  IF AVAILABLE xlatedb.XL_Project THEN
      MaxGuess = xlatedb.XL_Project.NumberOfProcedures.

DO WITH FRAME ProcsFrame:
  {adetran/common/oqryproc.i 
     &WildCardExp       = WildCardExp
     &Lock              = "SHARE-LOCK"
     &QueryName		= "ProcsBrowser"
     &DbTable           = "xlatedb.XL_Procedure"
     &DbFileFldName     = "xlatedb.XL_Procedure.FileName"
     &AndWhereClause    = "AND xlatedb.XL_Procedure.Directory = DirList:SCREEN-VALUE"
     &OrWhereClause     = " "
     &ByStatement       = "BY xlatedb.XL_Procedure.FileName"
  }
END.
  
  if MaxGuess > 0 then
    ProcsBrowser:max-data-guess = MaxGuess.
END.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ProcessOptions WINDOW-1 
PROCEDURE ProcessOptions :
/* Evaluates the options
 * selected, then updates the 'NeedsExtracting'
 * field, or adds/deletes procedures.
 *
 * For a subset scan, the same rules apply but only working with the subset
 * list. NOTE that we for the whole project, we apply the wildcardexp 
 * before deciding to work with a file. For compatibility, we will do the same
 * to the subset.
 * For instance, if the subset contains *.w and *.p, but the procedure tab
 * wildcard is set to *.w when the OK is pressed on the SCAN dialog, we will
 * only update the *.w files
 *
 * Option1 - Include Any New Procedure
 * Option2 - Update Procedure With a More Recent Date
 * Option3 - Update Procedure With a File Size Change
 * Option4 - Remove Any Procedure No Longer Found
 */
  DEFINE INPUT  PARAMETER pOption1     AS LOGICAL              NO-UNDO.
  DEFINE INPUT  PARAMETER pOption2     AS LOGICAL              NO-UNDO.
  DEFINE INPUT  PARAMETER pOption3     AS LOGICAL              NO-UNDO.
  DEFINE INPUT  PARAMETER pOption4     AS LOGICAL              NO-UNDO.
  DEFINE OUTPUT PARAMETER NewCnt       AS INTEGER              NO-UNDO.

  DEFINE VARIABLE CR            AS CHARACTER                   NO-UNDO.
  DEFINE VARIABLE CurDir        AS CHARACTER                   NO-UNDO.
  DEFINE VARIABLE CurDirectory  AS CHARACTER                   NO-UNDO.
  DEFINE VARIABLE DelCnt        AS INTEGER                     NO-UNDO.
  DEFINE VARIABLE DirCnt        AS INTEGER                     NO-UNDO.
  DEFINE VARIABLE i             AS INTEGER                     NO-UNDO.
  DEFINE VARIABLE File_Name     AS CHARACTER                   NO-UNDO.
  DEFINE VARIABLE Full_Name     AS CHARACTER                   NO-UNDO.
  DEFINE VARIABLE LastGoodDir   AS CHARACTER                   NO-UNDO.
  DEFINE VARIABLE Source-Dir    AS CHARACTER                   NO-UNDO.
  DEFINE VARIABLE start-dir     AS CHARACTER                   NO-UNDO.
  DEFINE VARIABLE tChar         AS CHARACTER                   NO-UNDO.
  DEFINE VARIABLE tDate         AS DATE                        NO-UNDO.
  DEFINE VARIABLE tDirList      AS CHARACTER                   NO-UNDO.
  DEFINE VARIABLE tIntTime      AS INTEGER                     NO-UNDO.
  DEFINE VARIABLE tModTime      AS INTEGER                     NO-UNDO.
  DEFINE VARIABLE tTime         AS CHARACTER                   NO-UNDO.
  DEFINE VARIABLE tmp-recid     AS RECID                       NO-UNDO.
  DEFINE VARIABLE UpdateCnt     AS INTEGER                     NO-UNDO.

  DEFINE VARIABLE base-name     AS CHARACTER                   NO-UNDO.
  DEFINE VARIABLE full-name     AS CHARACTER                   NO-UNDO.

  DEFINE VARIABLE cTemp         AS CHARACTER                   NO-UNDO.
  DEFINE VARIABLE lIncludeSubDir AS LOGICAL                    NO-UNDO.

  RUN adecomm/_setcurs.p ("WAIT":U).

  /* Generate a list of directories.  There are two methods: 1) If user added files
     with "Include Sub-directories" option, gather all files in the start directory
     plus all subdirectories plus anyother directories represented. 2) Just get all
     subdirectories currently represented.                                       
     xlatedb.XL_Project.ProjectRevision    
         Revision CHR(4) Refresh? CHR(4) IncludeSubDir? StartDir
   */

  IF NUM-ENTRIES(xlatedb.XL_Project.ProjectRevision,CHR(4)) > 2 THEN DO:
    IF ENTRY(3, xlatedb.XL_Project.ProjectRevision, CHR(4)) NE "NO":U THEN
    lIncludeSubDirs = TRUE.
  END.

  FIND FIRST xlatedb.XL_Project NO-LOCK.
  Source-Dir = xlatedb.XL_Project.ApplDirectory.
  IF lIncludeSubDirs AND NOT lSubset THEN
  DO:
         ASSIGN start-dir = 
            ENTRY(2,    /* Entry 3 is of the form: "YES start-dir" */
            ENTRY(3, xlatedb.XL_Project.ProjectRevision, CHR(4)), " ":U).
         RUN adetran/pm/_subdirs.w (INPUT start-dir, OUTPUT tDirList).
         ASSIGN tDirList = REPLACE(REPLACE(tDirList, Source-Dir + "{&SLASH}":U, "":U),
                                   Source-Dir, ".":U).
  END. /* Include Sub Dirs Whole Project */

  ELSE IF NOT lSubset THEN
  DO:
     FOR EACH xlatedb.XL_Procedure NO-LOCK 
            BREAK BY xlatedb.XL_Procedure.Directory:
       IF FIRST-OF(xlatedb.XL_Procedure.Directory) THEN DO:
         /* Make sure that this directory is in rDirList */
         IF LOOKUP(xlatedb.XL_Procedure.Directory, tDirList) = 0 THEN
           tDirList = tDirList + ",":U + xlatedb.XL_Procedure.Directory.
       END.  /* IF first of directory */
     END.  /* For each XL_Procedure */
  END. /* Whole Project */
  ELSE
  DO:
     /* ttDir contains all the unique directories/subdirectories chosen 
      * used only when subsets are used and include subdirs was chosen
      * when adding procedures 
      * why would there be dups? because in the subset list, you can 
      * have adetran
      *      adetran/pm
      * and if we use _subdirs.w adetran, adetran/pm will already be in the 
      *    list by the time we do _subdirs.w adetran/pm
      */
     FOR EACH ttDir:
        DELETE ttDir.
     END.
     ASSIGN tDirList = "":U.

     FOR EACH bSubsetList WHERE bSubsetList.Project = ProjectDB
                            AND bSubsetList.Active  = TRUE
       NO-LOCK BREAK BY bSubsetList.Directory:

        IF FIRST-OF(bSubsetList.Directory) THEN
        DO:
           IF lIncludeSubDirs THEN
           DO: /* Include SubDirs */
              ASSIGN start-dir = xlatedb.XL_Project.ApplDir + 
                                 "\" + bSubsetList.Directory.
              RUN adetran/pm/_subdirs.w (INPUT start-dir, OUTPUT tDirList).
              /* tDirList = "d:\9\ade\adetran\pm"
               * tDirList = "adetran\pm"      1st REPLACE
               *
               * tDirList = "d:\9\ade"
               * tDirList = "."               2nd REPLACE if this scenario
               */
              ASSIGN tDirList = 
                 REPLACE(REPLACE(tDirList,Source-Dir + "{&SLASH}":U, "":U),Source-Dir, ".":U).
              DO i = 1 TO NUM-ENTRIES(tDirList):
                 cTemp = ENTRY(1,tDirList).
                 FIND FIRST ttDir WHERE ttDir.Directory = cTemp NO-LOCK NO-ERROR.
                 IF NOT AVAILABLE ttDir THEN
                 DO:
                    CREATE ttDir.
                    ASSIGN ttDir.Directory = cTemp.
                 END.
              END.
           END. /* Include SubDirs */
           /* Make sure that this directory is in rDirList */
           FIND FIRST ttDir WHERE ttDir.Directory = bSubsetList.Directory
             NO-LOCK NO-ERROR.
           IF NOT AVAILABLE ttDir THEN
           DO:
              CREATE ttDir.
              ASSIGN ttDir.Directory = bSubsetList.Directory.
           END.
         END. /* First Directory */
      END. /* each subsetlist directory */ 

      /* Create tDirList 
       */
      ASSIGN tDirList = "":U.
      FOR EACH ttDir BREAK BY ttDir.Directory:
         IF FIRST-OF(ttDir.Directory) THEN
           ASSIGN tDirList = tDirList + "," + ttDir.Directory.
      END.
  END. /* Subset */

  ASSIGN tDirList           = LEFT-TRIM(tDirList,",":U)
         CR                 = CHR(10)
         CurFilter          = WildCardExp:SCREEN-VALUE IN FRAME {&FRAME-NAME}
         UpdateCnt          = 0
         DelCnt             = 0.

  DO DirCnt = 1 TO NUM-ENTRIES(tDirList) WITH FRAME {&FRAME-NAME}:
    ASSIGN CurDirectory             = ENTRY(DirCnt,tDirList)
           LastGoodDir              = CurDirLabel:SCREEN-VALUE
           CurDirLabel:SCREEN-VALUE = RIGHT-TRIM(CurDirectory,"\":U)
           AppDir:SCREEN-VALUE      = xlatedb.xl_Project.ApplDirectory.

    IF CurDirectory BEGINS AppDir:SCREEN-VALUE THEN CurDir = CurDirectory.
    ELSE RUN adecomm/_osfmush.p (INPUT AppDir:SCREEN-VALUE,
                                 INPUT TRIM(CurDirectory, ".":U),
                                 OUTPUT CurDir).

    ASSIGN listCnt = 0.
    FOR EACH tt-list-char:
       DELETE tt-list-char.
    END.  

    ASSIGN CurDirectory       = TRIM(CurDirectory)
           FILE-INFO:filename = CurDir.
    IF (NOT lSubset) OR (lSubset AND pOption1) THEN
    DO:
       INPUT FROM OS-DIR (CurDir) NO-ATTR-LIST.
       REPEAT:
          IMPORT base-name full-name.
          DO i = 1 TO NUM-ENTRIES(WildCardExp:SCREEN-VALUE,",":U):
             wildCardItem = ENTRY(i,WildCardExp:SCREEN-VALUE,",":U).
             IF base-name MATCHES WildCardItem THEN
             DO:
               CREATE tt-list-char.
               ASSIGN listCnt = listCnt + 1
                      tt-list-char.list-char = base-name
                      tt-list-char.sequence_num = listCnt.
             END.
          END.
       END. /* Repeat */
    END. /* Whole Project or Subset w/ Option 1*/
    ELSE
    DO:
       /* CurDir       is of the format d:/9/ade/adetran/pm
        * CurDirectory                  adetran/pm
        */ 
       NextFile:
       FOR EACH bSubsetList WHERE bSubsetList.Project   = ProjectDB
                              AND bSubsetList.Directory = CurDirectory NO-LOCK:
          /* A bit weird, but we are maintaining consistency in regards to 
           * applying the wildcardexp found in Procedure Tab to the scan process
           */

          IF bSubsetList.FileName = cAllFiles THEN
          DO:
             nextFile:
             FOR EACH bFileList WHERE bFileList.Project   = ProjectDB
                                  AND bFileList.Directory = bSubsetList.Directory NO-LOCK:
                DO i = 1 TO NUM-ENTRIES(WildCardExp:SCREEN-VALUE,",":U):
                   wildCardItem = ENTRY(i,WildCardExp:SCREEN-VALUE,",":U).
                   IF bFileList.FileName MATCHES WildCardItem THEN
                   DO:
                      CREATE tt-list-char.
                      ASSIGN listCnt = listCnt + 1
                         tt-list-char.list-char = bFileList.FileName
                         tt-list-char.sequence_num = listCnt.
                      NEXT nextFile.
                   END. /* Matches WildCard */
                END. /* Multiple WildCard Entries */
             END. /* Cycle through all Files in Dir */
          END. /* Dir /All Files */
          ELSE
          DO:
              DO i = 1 TO NUM-ENTRIES(WildCardExp:SCREEN-VALUE,",":U):
                 wildCardItem = ENTRY(i,WildCardExp:SCREEN-VALUE,",":U).
                 IF bSubsetList.FileName MATCHES WildCardItem THEN
                 DO:
                    CREATE tt-list-char.
                    ASSIGN listCnt = listCnt + 1
                      tt-list-char.list-char = bSubsetList.FileName
                      tt-list-char.sequence_num = listCnt.
                    NEXT nextFile.
                 END.  /* Matches WildCard */
              END. /* Multiple WildCard Entries */
          END. /* bSubsetList.FileName <> cAllFiles */
       END. /* each subset record */
    END. /*  Subset w/out Option 1 */
   
    FIND FIRST tt-list-char NO-LOCK NO-ERROR.
    IF AVAILABLE tt-list-char THEN
    DO:
      IF DirList:LOOKUP(CurDirectory) = 0 THEN
        Result = DirList:ADD-FIRST(CurDirectory).
      DirList:SCREEN-VALUE = CurDirectory.
    END.
    ELSE CurDirLabel:SCREEN-VALUE = LastGoodDir.

    /* tt-list-char will contain all the procedures to be looked at */
    FOR EACH tt-list-char:
      ASSIGN File_Name = tt-list-char.list-char.
      FIND xlatedb.XL_Procedure WHERE xlatedb.XL_Procedure.FileName  = File_Name
                                  AND xlatedb.XL_Procedure.Directory = CurDirectory
           NO-LOCK NO-ERROR.

      /* Produce a full pathname for the file. */
      RUN adecomm/_osfmush.p (INPUT CurDir , INPUT File_Name, OUTPUT Full_Name).

      RUN FindFileInfo (INPUT Full_Name, OUTPUT FileSize, OUTPUT ModDate,
                        OUTPUT ModTime, OUTPUT ErrorStatus).

      /* Option # 2: update any procedures with a more recent update date */
      IF AVAILABLE xlatedb.XL_Procedure THEN DO:
        IF pOption2 THEN DO:
          ASSIGN tDate    = DATE(ENTRY(1,xlatedb.XL_Procedure.UpdateDateTime," ":U))
                 tTime    = ENTRY(3,xlatedb.XL_Procedure.UpdateDateTime," ":U)
                 /* This time thing works because it is an int the concatination of 
                    HH + MM + SS, not the sum of integers                           */
                 tModTime = INTEGER(ENTRY(1,ModTime,":":U) +
                                    ENTRY(2,ModTime,":":U) +
                                    ENTRY(3,ModTime,":":U))
                 tIntTime = INTEGER(ENTRY(1,tTime,":":U) +
                                    ENTRY(2,tTime,":":U) +
                                    ENTRY(3,tTime,":":U)).

          IF ((TODAY - ModDate) < (TODAY - tDate)) OR
             ((TODAY - ModDate) = (TODAY - tDate) AND tModTime > tIntTime) THEN
          DO TRANSACTION:
            tmp-recid = RECID(xlatedb.XL_Procedure).
            FIND xlatedb.XL_Procedure WHERE RECID(xlatedb.XL_Procedure) = tmp-recid
                 EXCLUSIVE-LOCK NO-ERROR.
            IF AVAILABLE xlatedb.XL_Procedure THEN
              ASSIGN xlatedb.XL_Procedure.UpdateDateTime  = string(ModDate) + "  ":U + ModTime
                     xlatedb.XL_Procedure.FileSize        = FileSize
                     xlatedb.XL_Procedure.NeedsExtracting = TRUE
                     UpdateCnt                            = UpdateCnt + 1.
            ELSE DO: /* Not AVAILABLE - must be locked */
              ThisMessage = SUBSTITUTE("Unable to process &1. ", File_name) +
                        "Its record in the translation database is locked by another user.".
              RUN adecomm/_s-alert.p (INPUT-OUTPUT ErrorStatus, "w":U,"ok":U, ThisMessage).
            END.  /* Else DO */
          END. /* DO Transaction */
        END. /* IF pOption2 */

        /* Option # 3: Update any procedure with a larger file size */
        IF pOption3 THEN DO:
          IF FileSize > xlatedb.XL_Procedure.FileSize THEN DO TRANSACTION:
            tmp-recid = RECID(xlatedb.XL_Procedure).
            FIND xlatedb.XL_Procedure WHERE RECID(xlatedb.XL_Procedure) = tmp-recid
                 EXCLUSIVE-LOCK NO-ERROR.
            IF AVAILABLE xlatedb.XL_Procedure THEN
              ASSIGN xlatedb.XL_Procedure.UpdateDateTime  = string(ModDate) + "  ":U + ModTime
                     xlatedb.XL_Procedure.FileSize        = FileSize
                     xlatedb.XL_Procedure.NeedsExtracting = TRUE
                     UpdateCnt                             = UpdateCnt + 1.
            ELSE DO: /* Not AVAILABLE - must be locked */
              ThisMessage = SUBSTITUTE("Unable to process &1. ", File_name) +
                        "Its record in the translation database is locked by another user.".
              RUN adecomm/_s-alert.p (INPUT-OUTPUT ErrorStatus, "w":U,"ok":U, ThisMessage).
            END.
          END. /* Transaction */
        END.  /* IF pOption3 */
      END. /* IF AVAILABLE xlatedb.XL_Procedure */
     
      /* Option # 1: include any new procedures */
      IF (NOT AVAILABLE xlatedb.XL_Procedure) AND (pOption1) THEN DO TRANSACTION:
        CREATE xlatedb.XL_Procedure.
        ASSIGN xlatedb.XL_Procedure.Directory             = CurDirectory
               xlatedb.XL_Procedure.FileName              = File_Name
               xlatedb.XL_Procedure.CurrentStatus         = "- - -":U
               xlatedb.XL_Procedure.ResourceFileGenerated = FALSE
               xlatedb.XL_Procedure.UpdateDateTime        = STRING(ModDate) + "  ":U + ModTime
               xlatedb.XL_Procedure.FileSize              = FileSize
               xlatedb.XL_Procedure.NeedsExtracting       = TRUE
               NewCnt                                     = NewCnt + 1.

      END. /* Option1 and File_Name doesn't already exist TRANSACTION*/
    END.  /* DO i = 1 to num-entries */

    /* Option # 4: Remove any procedure no longer found */

    IF pOption4 THEN DO:
      FOR EACH xlatedb.XL_Procedure WHERE
          xlatedb.XL_Procedure.Directory = CurDirectory EXCLUSIVE-LOCK:
        FIND FIRST tt-list-char WHERE
           tt-list-char.list-char = xlatedb.XL_Procedure.FileName NO-LOCK NO-ERROR.
        IF NOT AVAILABLE tt-list-char THEN 
        DO:
          FOR EACH xlatedb.XL_Kit-Proc WHERE
              xlatedb.XL_Kit-Proc.Directory = CurDirectory AND
              xlatedb.XL_Kit-Proc.FileName  = xlatedb.XL_Procedure.FileName EXCLUSIVE-LOCK:
            DELETE xlatedb.XL_Kit-Proc.
          END.
          DELETE xlatedb.XL_Procedure.
          DelCnt = DelCnt + 1.
        END.  /* IF not can-fin tTblfn */
      END. /* For each xlatedb.XL_Procedure in the current directory */
    END.  /* DO IF pOption4 (Remove any procedures no longer there */
  END.  /* DO DirCnt = 1 to Num Dirs */

  IF NewCnt = 1 THEN
    tChar = tChar + "One procedure was added.^".
  ELSE IF NewCnt > 1 THEN
    tChar = tChar + STRING(NewCnt) + " procedures were added.^".
  IF UpdateCnt = 1 THEN
    tChar = tChar + "One procedure was updated.^".
  ELSE IF UpdateCnt >= 1 THEN
    tChar = tChar + STRING(UpdateCnt) + " procedures were updated.^".
  IF DelCnt >= 1 THEN DO:
    IF DelCnt = 1 THEN tChar = tChar + "One procedure was removed.^".
                  ELSE tChar = tChar + STRING(DelCnt) + " procedures were removed.^".
    IF CurrentMode = 2 THEN RUN OpenQuery IN _hTrans.
  END.  /* IF DelCnt >= 1 */
  RUN adecomm/_setcurs.p ("":U).

  IF NewCnt >= 1 OR UpdateCnt >= 1 OR DelCnt >= 1 THEN
    RUN adecomm/_s-alert.p (INPUT-OUTPUT ErrorStatus, "i*":U, "ok":U, tChar).
  ELSE MESSAGE "Scan has completed. Nothing has changed." VIEW-AS ALERT-BOX INFORMATION.
  RUN OpenQuery.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE Realize WINDOW-1 
PROCEDURE Realize :
do with frame {&frame-name}:   
  frame {&frame-name}:hidden = true.
  if connected("xlatedb":u) then do:
    DirList = "":U.  
    for each xlatedb.XL_Procedure no-lock
      break by xlatedb.XL_Procedure.Directory:
      if first-of (xlatedb.XL_Procedure.Directory) then 
        DirList = if DirList = "":U 
                  then xlatedb.XL_Procedure.Directory
                  else DirList + ",":u + xlatedb.XL_Procedure.Directory.
    end. 

    if DirList <> "":U or DirList <> ? then do:
      assign
        DirList:list-items   = DirList
        DirList:screen-value = DirList:entry(1).
    end.
    else do:
      CurDirLabel:screen-value = "":U.
    end.
  end.
  
  IF WildCardExp:SCREEN-VALUE IN FRAME {&FRAME-NAME} = "":U THEN
   WildCardExp:SCREEN-VALUE IN FRAME {&FRAME-NAME} = "*.p,*.w":U.

  display
    AppDir
    FiltersLabel
    AppDirLabel
    DirLabel
    WildCardExp
  with frame {&frame-name} in window _MainWindow.
   
  enable
    AppDir /* read-only */
    DirList
    ProcsBrowser
    BtnAdd
    BtnRemove
    BtnUpdate
    BtnEdit
  with frame {&frame-name} in window _MainWindow. 
         
  run SetSensitivity.
  
  if DirList:screen-value <> ? then apply "value-changed":u to DirList in frame {&frame-name}.  

  frame {&frame-name}:hidden = false. 
  apply "entry":u to DirList IN FRAME {&frame-name}. 
end. /* Else do with frame {&Frame-NAME} */ 
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE SetSensitivity WINDOW-1 
PROCEDURE SetSensitivity :
do with frame {&frame-name}:
    find first xlatedb.XL_Project no-lock no-error. 
    if available xlatedb.XL_Project and
      xlatedb.XL_Project.NumberOfprocedures >= 1 then assign
      BtnEdit:sensitive      = true
      BtnUpdate:sensitive    = true.
    else assign
      BtnEdit:sensitive      = false
      BtnUpdate:sensitive    = false.
        
   assign  
     AppDir:screen-value  = right-trim(xlatedb.xl_project.ApplDirectory,"\":u)
     AppDir:read-only     = true.
     
   assign BtnRemove:sensitive = (DirList:num-items >= 1).

  end.
  run SetSensitivity in _hMain.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE saveSubset WINDOW-1 
PROCEDURE saveSubset:
  /* PURPOSE:
   * We want to save the current subset list in the database in order to maintain it for
   * the next time we connect to the project.  We use the XL_Invalid table for this 
   * purpose.  Each time we open a project database, we load the contents of the 
   * XL_Invalid table into the subset list temp-table to restore the last subset.
   * (tomn 10/99)
   */

  IF NOT CONNECTED("xlatedb":U) THEN RETURN.

  /* Clear the table first */
  FOR EACH xlatedb.XL_Invalid:
    DELETE xlatedb.XL_Invalid.
  END.

  /* Save current subset list in XL_Invalid table */
  FOR EACH bSubsetList WHERE bSubsetList.Project = ProjectDB
                         AND bSubsetList.Active  = TRUE NO-LOCK:
     CREATE xlatedb.XL_Invalid.
     ASSIGN xlatedb.XL_Invalid.GlossaryName = bSubsetList.Directory
            xlatedb.XL_Invalid.TargetPhrase = bSubsetList.FileName.
  END.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE loadSubset WINDOW-1 
PROCEDURE loadSubset:
  /* PURPOSE:
   * Each time we connect to a project database, we want to load the previously
   * saved subset for use again.  The subset lists are maintained manually by 
   * the user.  (tomn 10/99)
   */

  IF NOT CONNECTED("xlatedb":U) THEN RETURN.

  /* See if the subset has already been loaded for this project (i.e., we are only
   * switching between connected projects).
   */
  IF CAN-FIND(FIRST bSubsetList WHERE bSubsetList.Project = ProjectDB) THEN
    RETURN.

  /* Load previous subset into temp-table */
  FOR EACH xlatedb.XL_Invalid:
    CREATE bSubsetList.
    ASSIGN bSubsetList.Project   = ProjectDB
           bSubsetList.Directory = xlatedb.XL_Invalid.GLossaryName
           bSubsetList.FileName  = xlatedb.XL_Invalid.TargetPhrase.
  END.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE checkSeqInst WINDOW-1 
PROCEDURE checkSeqInst:
  /* PURPOSE:
   * In version 9.1A we implemented a workaround for a problem where
   * Sequence and Instance numbers were being reused, which caused
   * some problems with kit consolidation.  This workaround involves
   * storing the "high water mark" values for Sequence and Instance
   * numbers in a database field.  This procedure is used to try and
   * correct this problem when connecting to a project database that
   * was created before version 9.1A.  It is not foolproof, but it
   * should correct the problem in many cases.  We simply search for
   * the highest values in each case, and store the numbers (with an
   * additional fudge factor of 99 for added reliability).  (11/99 tomn)
   */
  DEFINE VARIABLE iNextString         AS INTEGER    NO-UNDO.
  DEFINE VARIABLE iNextInstance       AS INTEGER    NO-UNDO.

  IF NOT CONNECTED("xlatedb":U) THEN RETURN.

  /* Ensure that this open database has the updated DisplayType
   * modified to maintain Sequence/Instance IDs:
   *  xlatedb.XL_project.DisplayType =
   *    DisplayType + CHR(4) + Sequence_Num + CHR(4) + Instance_Number
   */
  DO TRANSACTION ON ERROR UNDO, LEAVE:
    FIND FIRST xlatedb.XL_Project EXCLUSIVE-LOCK NO-ERROR.
    /* If DisplayType does not have the IDs, then determine what they are */
    IF NOT (NUM-ENTRIES(xlatedb.XL_Project.DisplayType,CHR(4)) > 1) THEN
    DO:
      FIND LAST xlatedb.XL_String_Info USE-INDEX Sequence_Num NO-LOCK NO-ERROR.
      FIND LAST xlatedb.XL_Instance USE-INDEX Instance_Num NO-LOCK NO-ERROR.
      ASSIGN
        iNextString    = IF AVAILABLE xlatedb.XL_String_Info THEN
                           xlatedb.XL_String_Info.Sequence_Num + 100
                         ELSE
                           1
        iNextInstance = IF AVAILABLE xlatedb.XL_Instance THEN
                           xlatedb.XL_Instance.Instance_Num + 100
                        ELSE
                           1
        xlatedb.XL_Project.DisplayType = xlatedb.XL_Project.DisplayType
                                         + CHR(4) + TRIM(STRING(iNextString))
                                         + CHR(4) + TRIM(STRING(iNextInstance)).
    END.
  END.  /* TRANSACTION */

  FIND CURRENT xlatedb.XL_Project NO-LOCK NO-ERROR.  /* downgrade lock */
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME
