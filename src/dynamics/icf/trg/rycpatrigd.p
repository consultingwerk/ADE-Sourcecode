/*********************************************************************
* Copyright (C) 2005 by Progress Software Corporation. All rights    *
* reserved.  Prior versions of this work may contain portions        *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR DELETE OF ryc_page .

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   ryc_page           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE ryc_page
&SCOPED-DEFINE TRIGGER_FLA rycpa
&SCOPED-DEFINE TRIGGER_OBJ page_obj


DEFINE BUFFER lb_table FOR ryc_page.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR ryc_page.     /* Used for lock upgrades */

DEFINE BUFFER o_ryc_page FOR ryc_page.

/* Standard top of DELETE trigger code */
{af/sup/aftrigtopd.i}

  




/* Generated by ICF ERwin Template */
/* ryc_page contains ryc_object_instance ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_object_instance) = 0 &THEN
  DEFINE BUFFER lbe_object_instance FOR ryc_object_instance.
  &GLOBAL-DEFINE lbe_object_instance yes
&ENDIF
FOR EACH ryc_object_instance NO-LOCK
   WHERE ryc_object_instance.page_obj = ryc_page.page_obj
   ON STOP UNDO, RETURN ERROR "AF^104^rycpatrigd.p^delete ryc_object_instance":U:
    FIND FIRST lbe_object_instance EXCLUSIVE-LOCK
         WHERE ROWID(lbe_object_instance) = ROWID(ryc_object_instance)
         NO-ERROR.
    IF AVAILABLE lbe_object_instance THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_object_instance"}
      END.
END.














/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'rycpa':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "DELETE":U, INPUT "rycpa":U, INPUT BUFFER ryc_page:HANDLE, INPUT BUFFER o_ryc_page:HANDLE).

/* Standard bottom of DELETE trigger code */
{af/sup/aftrigendd.i}


/* Place any specific DELETE trigger customisations here */
