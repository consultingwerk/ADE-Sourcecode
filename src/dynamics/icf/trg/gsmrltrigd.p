/*********************************************************************
* Copyright (C) 2005 by Progress Software Corporation. All rights    *
* reserved.  Prior versions of this work may contain portions        *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR DELETE OF gsm_release .

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsm_release           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsm_release
&SCOPED-DEFINE TRIGGER_FLA gsmrl
&SCOPED-DEFINE TRIGGER_OBJ release_obj


DEFINE BUFFER lb_table FOR gsm_release.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsm_release.     /* Used for lock upgrades */

DEFINE BUFFER o_gsm_release FOR gsm_release.

/* Standard top of DELETE trigger code */
{af/sup/aftrigtopd.i}

  




/* Generated by ICF ERwin Template */
/* gsm_release contains gst_release_version ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_release_version) = 0 &THEN
  DEFINE BUFFER lbe_release_version FOR gst_release_version.
  &GLOBAL-DEFINE lbe_release_version yes
&ENDIF
FOR EACH gst_release_version NO-LOCK
   WHERE gst_release_version.release_obj = gsm_release.release_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsmrltrigd.p^delete gst_release_version":U:
    FIND FIRST lbe_release_version EXCLUSIVE-LOCK
         WHERE ROWID(lbe_release_version) = ROWID(gst_release_version)
         NO-ERROR.
    IF AVAILABLE lbe_release_version THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_release_version"}
      END.
END.














/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gsmrl':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "DELETE":U, INPUT "gsmrl":U, INPUT BUFFER gsm_release:HANDLE, INPUT BUFFER o_gsm_release:HANDLE).

/* Standard bottom of DELETE trigger code */
{af/sup/aftrigendd.i}


/* Place any specific DELETE trigger customisations here */
