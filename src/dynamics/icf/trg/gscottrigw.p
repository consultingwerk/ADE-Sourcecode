/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation. All rights    *
* reserved. Prior versions of this work may contain portions         *
* contributed by participants of Possenet.                           *
*               PSC                                                  *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR WRITE OF gsc_object_type OLD BUFFER o_gsc_object_type.

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsc_object_type           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsc_object_type
&SCOPED-DEFINE TRIGGER_FLA gscot
&SCOPED-DEFINE TRIGGER_OBJ object_type_obj


DEFINE BUFFER lb_table FOR gsc_object_type.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsc_object_type.     /* Used for lock upgrades */



/* Standard top of WRITE trigger code */
{af/sup/aftrigtopw.i}

/* properform fields if enabled for table */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gscot':U
              AND gsc_entity_mnemonic.auto_properform_strings = YES) THEN
  RUN af/app/afpropfrmp.p (INPUT BUFFER gsc_object_type:HANDLE).
  



/* Generated by ICF ERwin Template */
/* gsc_object_type customizes gsc_object_type ON CHILD UPDATE SET NULL */
IF NEW gsc_object_type OR  gsc_object_type.custom_object_type_obj <> o_gsc_object_type.custom_object_type_obj  THEN
  DO:
    
    IF NOT(CAN-FIND(FIRST lb_table WHERE
        gsc_object_type.custom_object_type_obj = lb_table.object_type_obj)) THEN DO:
        
        ASSIGN gsc_object_type.custom_object_type_obj = 0 .
    END.
    
  END.

/* Generated by ICF ERwin Template */
/* ryc_smartobject is the class procedure for gsc_object_type ON CHILD UPDATE SET NULL */
IF NEW gsc_object_type OR  gsc_object_type.class_smartobject_obj <> o_gsc_object_type.class_smartobject_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST ryc_smartobject WHERE
        gsc_object_type.class_smartobject_obj = ryc_smartobject.smartobject_obj)) THEN DO:
        
        ASSIGN gsc_object_type.class_smartobject_obj = 0 .
    END.
    
    
  END.

/* Generated by ICF ERwin Template */
/* gsc_object_type is extended by gsc_object_type ON CHILD UPDATE SET NULL */
IF NEW gsc_object_type OR  gsc_object_type.extends_object_type_obj <> o_gsc_object_type.extends_object_type_obj  THEN
  DO:
    
    IF NOT(CAN-FIND(FIRST lb_table WHERE
        gsc_object_type.extends_object_type_obj = lb_table.object_type_obj)) THEN DO:
        
        ASSIGN gsc_object_type.extends_object_type_obj = 0 .
    END.
    
  END.








IF NOT NEW gsc_object_type AND gsc_object_type.{&TRIGGER_OBJ} <> o_gsc_object_type.{&TRIGGER_OBJ} THEN
    DO:
        ASSIGN lv-error = YES lv-errgrp = "AF":U lv-errnum = 13 lv-include = "table object number":U.
        RUN error-message (lv-errgrp,lv-errnum,lv-include).
    END.

/* Customisations to WRITE trigger */
{icf/trg/gscottrigw.i}



/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gscot':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "WRITE":U, INPUT "gscot":U, INPUT BUFFER gsc_object_type:HANDLE, INPUT BUFFER o_gsc_object_type:HANDLE).

/* Standard bottom of WRITE trigger code */
{af/sup/aftrigendw.i}



