/*********************************************************************
* Copyright (C) 2005 by Progress Software Corporation. All rights    *
* reserved.  Prior versions of this work may contain portions        *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR DELETE OF gst_deployment .

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gst_deployment           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gst_deployment
&SCOPED-DEFINE TRIGGER_FLA gstdp
&SCOPED-DEFINE TRIGGER_OBJ deployment_obj


DEFINE BUFFER lb_table FOR gst_deployment.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gst_deployment.     /* Used for lock upgrades */

DEFINE BUFFER o_gst_deployment FOR gst_deployment.

/* Standard top of DELETE trigger code */
{af/sup/aftrigtopd.i}

  




/* Generated by ICF ERwin Template */
/* gst_deployment must be loaded after gst_deployment ON PARENT DELETE SET NULL */


FOR EACH lb_table NO-LOCK
   WHERE lb_table.load_after_deployment_obj = gst_deployment.deployment_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gstdptrigd.p^update gst_deployment":U:
    FIND FIRST lb1_table EXCLUSIVE-LOCK
         WHERE ROWID(lb1_table) = ROWID(lb_table)
         NO-ERROR.
    IF AVAILABLE lb1_table THEN
      DO:
        
        ASSIGN lb1_table.load_after_deployment_obj = 0 .
      END.
END.


/* Generated by ICF ERwin Template */
/* gst_deployment consists of gst_dataset_file ON PARENT DELETE SET NULL */

&IF DEFINED(lbe_dataset_file) = 0 &THEN
  DEFINE BUFFER lbe_dataset_file FOR gst_dataset_file.
  &GLOBAL-DEFINE lbe_dataset_file yes
&ENDIF
FOR EACH gst_dataset_file NO-LOCK
   WHERE gst_dataset_file.deployment_obj = gst_deployment.deployment_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gstdptrigd.p^update gst_dataset_file":U:
    FIND FIRST lbe_dataset_file EXCLUSIVE-LOCK
         WHERE ROWID(lbe_dataset_file) = ROWID(gst_dataset_file)
         NO-ERROR.
    IF AVAILABLE lbe_dataset_file THEN
      DO:
        
        ASSIGN lbe_dataset_file.deployment_obj = 0 .
      END.
END.












/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gstdp':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "DELETE":U, INPUT "gstdp":U, INPUT BUFFER gst_deployment:HANDLE, INPUT BUFFER o_gst_deployment:HANDLE).

/* Standard bottom of DELETE trigger code */
{af/sup/aftrigendd.i}


/* Place any specific DELETE trigger customisations here */
