/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation. All rights    *
* reserved. Prior versions of this work may contain portions         *
* contributed by participants of Possenet.                           *
*               PSC                                                  *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR WRITE OF gsm_group_allocation OLD BUFFER o_gsm_group_allocation.

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsm_group_allocation           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsm_group_allocation
&SCOPED-DEFINE TRIGGER_FLA gsmga
&SCOPED-DEFINE TRIGGER_OBJ group_allocation_obj


DEFINE BUFFER lb_table FOR gsm_group_allocation.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsm_group_allocation.     /* Used for lock upgrades */



/* Standard top of WRITE trigger code */
{af/sup/aftrigtopw.i}

/* properform fields if enabled for table */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gsmga':U
              AND gsc_entity_mnemonic.auto_properform_strings = YES) THEN
  RUN af/app/afpropfrmp.p (INPUT BUFFER gsm_group_allocation:HANDLE).
  



/* Generated by ICF ERwin Template */
/* gsm_user is in gsm_group_allocation ON CHILD UPDATE RESTRICT */
IF NEW gsm_group_allocation OR  gsm_group_allocation.user_obj <> o_gsm_group_allocation.user_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST gsm_user WHERE
        gsm_group_allocation.user_obj = gsm_user.user_obj)) THEN
              DO:
                /* Cannot update child because parent does not exist ! */
                ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 103 lv-include = "gsm_group_allocation|gsm_user":U.
                RUN error-message (lv-errgrp, lv-errnum, lv-include).
              END.
    
    
  END.

/* Generated by ICF ERwin Template */
/* gsm_user group user contains gsm_group_allocation ON CHILD UPDATE RESTRICT */
IF NEW gsm_group_allocation OR  gsm_group_allocation.group_user_obj <> o_gsm_group_allocation.group_user_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST gsm_user WHERE
        gsm_group_allocation.group_user_obj = gsm_user.user_obj)) THEN
              DO:
                /* Cannot update child because parent does not exist ! */
                ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 103 lv-include = "gsm_group_allocation|gsm_user":U.
                RUN error-message (lv-errgrp, lv-errnum, lv-include).
              END.
    
    
  END.

/* Generated by ICF ERwin Template */
/* gsm_login_company has gsm_group_allocation ON CHILD UPDATE SET NULL */
IF NEW gsm_group_allocation OR  gsm_group_allocation.login_company_obj <> o_gsm_group_allocation.login_company_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST gsm_login_company WHERE
        gsm_group_allocation.login_company_obj = gsm_login_company.login_company_obj)) THEN DO:
        
        ASSIGN gsm_group_allocation.login_company_obj = 0 .
    END.
    
    
  END.








IF NOT NEW gsm_group_allocation AND gsm_group_allocation.{&TRIGGER_OBJ} <> o_gsm_group_allocation.{&TRIGGER_OBJ} THEN
    DO:
        ASSIGN lv-error = YES lv-errgrp = "AF":U lv-errnum = 13 lv-include = "table object number":U.
        RUN error-message (lv-errgrp,lv-errnum,lv-include).
    END.

/* Customisations to WRITE trigger */
{icf/trg/gsmgatrigw.i}



/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gsmga':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "WRITE":U, INPUT "gsmga":U, INPUT BUFFER gsm_group_allocation:HANDLE, INPUT BUFFER o_gsm_group_allocation:HANDLE).

/* Standard bottom of WRITE trigger code */
{af/sup/aftrigendw.i}



