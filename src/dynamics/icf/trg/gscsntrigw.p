/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation. All rights    *
* reserved. Prior versions of this work may contain portions         *
* contributed by participants of Possenet.                           *
*               PSC                                                  *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR WRITE OF gsc_next_sequence OLD BUFFER o_gsc_next_sequence.

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsc_next_sequence           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsc_next_sequence
&SCOPED-DEFINE TRIGGER_FLA gscsn
&SCOPED-DEFINE TRIGGER_OBJ next_sequence_obj


DEFINE BUFFER lb_table FOR gsc_next_sequence.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsc_next_sequence.     /* Used for lock upgrades */



/* Standard top of WRITE trigger code */
{af/sup/aftrigtopw.i}

/* properform fields if enabled for table */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gscsn':U
              AND gsc_entity_mnemonic.auto_properform_strings = YES) THEN
  RUN af/app/afpropfrmp.p (INPUT BUFFER gsc_next_sequence:HANDLE).
  



/* Generated by ICF ERwin Template */
/* gsc_sequence has gsc_next_sequence ON CHILD UPDATE RESTRICT */
IF NEW gsc_next_sequence OR  gsc_next_sequence.sequence_obj <> o_gsc_next_sequence.sequence_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST gsc_sequence WHERE
        gsc_next_sequence.sequence_obj = gsc_sequence.sequence_obj)) THEN
              DO:
                /* Cannot update child because parent does not exist ! */
                ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 103 lv-include = "gsc_next_sequence|gsc_sequence":U.
                RUN error-message (lv-errgrp, lv-errnum, lv-include).
              END.
    
    
  END.








IF NOT NEW gsc_next_sequence AND gsc_next_sequence.{&TRIGGER_OBJ} <> o_gsc_next_sequence.{&TRIGGER_OBJ} THEN
    DO:
        ASSIGN lv-error = YES lv-errgrp = "AF":U lv-errnum = 13 lv-include = "table object number":U.
        RUN error-message (lv-errgrp,lv-errnum,lv-include).
    END.

/* Customisations to WRITE trigger */
{icf/trg/gscsntrigw.i}



/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gscsn':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "WRITE":U, INPUT "gscsn":U, INPUT BUFFER gsc_next_sequence:HANDLE, INPUT BUFFER o_gsc_next_sequence:HANDLE).

/* Standard bottom of WRITE trigger code */
{af/sup/aftrigendw.i}



