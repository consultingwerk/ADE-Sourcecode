/*********************************************************************
* Copyright (C) 2005 by Progress Software Corporation. All rights    *
* reserved.  Prior versions of this work may contain portions        *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR DELETE OF gsc_product_module .

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsc_product_module           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsc_product_module
&SCOPED-DEFINE TRIGGER_FLA gscpm
&SCOPED-DEFINE TRIGGER_OBJ product_module_obj


DEFINE BUFFER lb_table FOR gsc_product_module.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsc_product_module.     /* Used for lock upgrades */

DEFINE BUFFER o_gsc_product_module FOR gsc_product_module.

/* Standard top of DELETE trigger code */
{af/sup/aftrigtopd.i}

  




/* Generated by ICF ERwin Template */
/* gsc_product_module contains gsc_product_module ON PARENT DELETE RESTRICT */

IF CAN-FIND(FIRST lb_table WHERE
    lb_table.parent_product_module_obj = gsc_product_module.product_module_obj) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "gsc_product_module|gsc_product_module":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.


/* Generated by ICF ERwin Template */
/* gsc_product_module has gsm_menu_item ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST gsm_menu_item WHERE
    gsm_menu_item.product_module_obj = gsc_product_module.product_module_obj) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "gsc_product_module|gsm_menu_item":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.



/* Generated by ICF ERwin Template */
/* gsc_product_module contains ryc_smartobject ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST ryc_smartobject WHERE
    ryc_smartobject.product_module_obj = gsc_product_module.product_module_obj) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "gsc_product_module|ryc_smartobject":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.



/* Generated by ICF ERwin Template */
/* gsc_product_module contains gsm_flow ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST gsm_flow WHERE
    gsm_flow.product_module_obj = gsc_product_module.product_module_obj) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "gsc_product_module|gsm_flow":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.



/* Generated by ICF ERwin Template */
/* gsc_product_module  gsm_menu_structure ON PARENT DELETE SET NULL */

&IF DEFINED(lbe_menu_structure) = 0 &THEN
  DEFINE BUFFER lbe_menu_structure FOR gsm_menu_structure.
  &GLOBAL-DEFINE lbe_menu_structure yes
&ENDIF
FOR EACH gsm_menu_structure NO-LOCK
   WHERE gsm_menu_structure.product_module_obj = gsc_product_module.product_module_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gscpmtrigd.p^update gsm_menu_structure":U:
    FIND FIRST lbe_menu_structure EXCLUSIVE-LOCK
         WHERE ROWID(lbe_menu_structure) = ROWID(gsm_menu_structure)
         NO-ERROR.
    IF AVAILABLE lbe_menu_structure THEN
      DO:
        
        ASSIGN lbe_menu_structure.product_module_obj = 0 .
      END.
END.



/* Generated by ICF ERwin Template */
/* gsc_product_module uses gsm_security_structure ON PARENT DELETE SET NULL */

&IF DEFINED(lbe_security_structure) = 0 &THEN
  DEFINE BUFFER lbe_security_structure FOR gsm_security_structure.
  &GLOBAL-DEFINE lbe_security_structure yes
&ENDIF
FOR EACH gsm_security_structure NO-LOCK
   WHERE gsm_security_structure.product_module_obj = gsc_product_module.product_module_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gscpmtrigd.p^update gsm_security_structure":U:
    FIND FIRST lbe_security_structure EXCLUSIVE-LOCK
         WHERE ROWID(lbe_security_structure) = ROWID(gsm_security_structure)
         NO-ERROR.
    IF AVAILABLE lbe_security_structure THEN
      DO:
        
        ASSIGN lbe_security_structure.product_module_obj = 0 .
      END.
END.












/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gscpm':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "DELETE":U, INPUT "gscpm":U, INPUT BUFFER gsc_product_module:HANDLE, INPUT BUFFER o_gsc_product_module:HANDLE).

/* Standard bottom of DELETE trigger code */
{af/sup/aftrigendd.i}


/* Place any specific DELETE trigger customisations here */
