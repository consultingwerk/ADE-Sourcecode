/*********************************************************************
* Copyright (C) 2005 by Progress Software Corporation. All rights    *
* reserved.  Prior versions of this work may contain portions        *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR DELETE OF gsm_login_company .

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsm_login_company           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsm_login_company
&SCOPED-DEFINE TRIGGER_FLA gsmlg
&SCOPED-DEFINE TRIGGER_OBJ login_company_obj


DEFINE BUFFER lb_table FOR gsm_login_company.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsm_login_company.     /* Used for lock upgrades */

DEFINE BUFFER o_gsm_login_company FOR gsm_login_company.

/* Standard top of DELETE trigger code */
{af/sup/aftrigtopd.i}

  




/* Generated by ICF ERwin Template */
/* gsm_login_company has gsm_group_allocation ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_group_allocation) = 0 &THEN
  DEFINE BUFFER lbe_group_allocation FOR gsm_group_allocation.
  &GLOBAL-DEFINE lbe_group_allocation yes
&ENDIF
FOR EACH gsm_group_allocation NO-LOCK
   WHERE gsm_group_allocation.login_company_obj = gsm_login_company.login_company_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsmlgtrigd.p^delete gsm_group_allocation":U:
    FIND FIRST lbe_group_allocation EXCLUSIVE-LOCK
         WHERE ROWID(lbe_group_allocation) = ROWID(gsm_group_allocation)
         NO-ERROR.
    IF AVAILABLE lbe_group_allocation THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_group_allocation"}
      END.
END.





/* Generated by ICF ERwin Template */
/* gsm_login_company requires a specialised gsm_flow_step ON PARENT DELETE SET NULL */

&IF DEFINED(lbe_flow_step) = 0 &THEN
  DEFINE BUFFER lbe_flow_step FOR gsm_flow_step.
  &GLOBAL-DEFINE lbe_flow_step yes
&ENDIF
FOR EACH gsm_flow_step NO-LOCK
   WHERE gsm_flow_step.login_company_obj = gsm_login_company.login_company_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsmlgtrigd.p^update gsm_flow_step":U:
    FIND FIRST lbe_flow_step EXCLUSIVE-LOCK
         WHERE ROWID(lbe_flow_step) = ROWID(gsm_flow_step)
         NO-ERROR.
    IF AVAILABLE lbe_flow_step THEN
      DO:
        
        ASSIGN lbe_flow_step.login_company_obj = 0 .
      END.
END.



/* Generated by ICF ERwin Template */
/* gsm_login_company  gsc_sequence ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_sequence) = 0 &THEN
  DEFINE BUFFER lbe_sequence FOR gsc_sequence.
  &GLOBAL-DEFINE lbe_sequence yes
&ENDIF
FOR EACH gsc_sequence NO-LOCK
   WHERE gsc_sequence.company_organisation_obj = gsm_login_company.login_company_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsmlgtrigd.p^delete gsc_sequence":U:
    FIND FIRST lbe_sequence EXCLUSIVE-LOCK
         WHERE ROWID(lbe_sequence) = ROWID(gsc_sequence)
         NO-ERROR.
    IF AVAILABLE lbe_sequence THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_sequence"}
      END.
END.





/* Generated by ICF ERwin Template */
/* gsm_login_company is the default login company for gsm_user ON PARENT DELETE SET NULL */

&IF DEFINED(lbe_user) = 0 &THEN
  DEFINE BUFFER lbe_user FOR gsm_user.
  &GLOBAL-DEFINE lbe_user yes
&ENDIF
FOR EACH gsm_user NO-LOCK
   WHERE gsm_user.default_login_company_obj = gsm_login_company.login_company_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsmlgtrigd.p^update gsm_user":U:
    FIND FIRST lbe_user EXCLUSIVE-LOCK
         WHERE ROWID(lbe_user) = ROWID(gsm_user)
         NO-ERROR.
    IF AVAILABLE lbe_user THEN
      DO:
        
        ASSIGN lbe_user.default_login_company_obj = 0 .
      END.
END.



/* Generated by ICF ERwin Template */
/* gsm_login_company affects this gsm_user_allocation ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_user_allocation) = 0 &THEN
  DEFINE BUFFER lbe_user_allocation FOR gsm_user_allocation.
  &GLOBAL-DEFINE lbe_user_allocation yes
&ENDIF
FOR EACH gsm_user_allocation NO-LOCK
   WHERE gsm_user_allocation.login_organisation_obj = gsm_login_company.login_company_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsmlgtrigd.p^delete gsm_user_allocation":U:
    FIND FIRST lbe_user_allocation EXCLUSIVE-LOCK
         WHERE ROWID(lbe_user_allocation) = ROWID(gsm_user_allocation)
         NO-ERROR.
    IF AVAILABLE lbe_user_allocation THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_user_allocation"}
      END.
END.





/* Generated by ICF ERwin Template */
/* gsm_login_company supplied gsc_product ON PARENT DELETE SET NULL */

&IF DEFINED(lbe_product) = 0 &THEN
  DEFINE BUFFER lbe_product FOR gsc_product.
  &GLOBAL-DEFINE lbe_product yes
&ENDIF
FOR EACH gsc_product NO-LOCK
   WHERE gsc_product.supplier_organisation_obj = gsm_login_company.login_company_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsmlgtrigd.p^update gsc_product":U:
    FIND FIRST lbe_product EXCLUSIVE-LOCK
         WHERE ROWID(lbe_product) = ROWID(gsc_product)
         NO-ERROR.
    IF AVAILABLE lbe_product THEN
      DO:
        
        ASSIGN lbe_product.supplier_organisation_obj = 0 .
      END.
END.












/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gsmlg':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "DELETE":U, INPUT "gsmlg":U, INPUT BUFFER gsm_login_company:HANDLE, INPUT BUFFER o_gsm_login_company:HANDLE).

/* Standard bottom of DELETE trigger code */
{af/sup/aftrigendd.i}


/* Place any specific DELETE trigger customisations here */



