/*********************************************************************
* Copyright (C) 2005 by Progress Software Corporation. All rights    *
* reserved.  Prior versions of this work may contain portions        *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR DELETE OF gsc_scm_tool .

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsc_scm_tool           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsc_scm_tool
&SCOPED-DEFINE TRIGGER_FLA gscsm
&SCOPED-DEFINE TRIGGER_OBJ scm_tool_obj


DEFINE BUFFER lb_table FOR gsc_scm_tool.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsc_scm_tool.     /* Used for lock upgrades */

DEFINE BUFFER o_gsc_scm_tool FOR gsc_scm_tool.

/* Standard top of DELETE trigger code */
{af/sup/aftrigtopd.i}

  




/* Generated by ICF ERwin Template */
/* gsc_scm_tool is integrated via gsm_scm_xref ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_scm_xref) = 0 &THEN
  DEFINE BUFFER lbe_scm_xref FOR gsm_scm_xref.
  &GLOBAL-DEFINE lbe_scm_xref yes
&ENDIF
FOR EACH gsm_scm_xref NO-LOCK
   WHERE gsm_scm_xref.scm_tool_obj = gsc_scm_tool.scm_tool_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gscsmtrigd.p^delete gsm_scm_xref":U:
    FIND FIRST lbe_scm_xref EXCLUSIVE-LOCK
         WHERE ROWID(lbe_scm_xref) = ROWID(gsm_scm_xref)
         NO-ERROR.
    IF AVAILABLE lbe_scm_xref THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_scm_xref"}
      END.
END.





/* Generated by ICF ERwin Template */
/* gsc_scm_tool is used by gsc_security_control ON PARENT DELETE SET NULL */

&IF DEFINED(lbe_security_control) = 0 &THEN
  DEFINE BUFFER lbe_security_control FOR gsc_security_control.
  &GLOBAL-DEFINE lbe_security_control yes
&ENDIF
FOR EACH gsc_security_control NO-LOCK
   WHERE gsc_security_control.scm_tool_obj = gsc_scm_tool.scm_tool_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gscsmtrigd.p^update gsc_security_control":U:
    FIND FIRST lbe_security_control EXCLUSIVE-LOCK
         WHERE ROWID(lbe_security_control) = ROWID(gsc_security_control)
         NO-ERROR.
    IF AVAILABLE lbe_security_control THEN
      DO:
        
        ASSIGN lbe_security_control.scm_tool_obj = 0 .
      END.
END.












/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gscsm':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "DELETE":U, INPUT "gscsm":U, INPUT BUFFER gsc_scm_tool:HANDLE, INPUT BUFFER o_gsc_scm_tool:HANDLE).

/* Standard bottom of DELETE trigger code */
{af/sup/aftrigendd.i}


/* Place any specific DELETE trigger customisations here */
