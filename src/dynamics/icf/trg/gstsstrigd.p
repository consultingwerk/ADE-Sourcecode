/*********************************************************************
* Copyright (C) 2005 by Progress Software Corporation. All rights    *
* reserved.  Prior versions of this work may contain portions        *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR DELETE OF gst_session .

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gst_session           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gst_session
&SCOPED-DEFINE TRIGGER_FLA gstss
&SCOPED-DEFINE TRIGGER_OBJ session_obj


DEFINE BUFFER lb_table FOR gst_session.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gst_session.     /* Used for lock upgrades */

DEFINE BUFFER o_gst_session FOR gst_session.

/* Standard top of DELETE trigger code */
{af/sup/aftrigtopd.i}

  




/* Generated by ICF ERwin Template */
/* gst_session has gst_context_scope ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_context_scope) = 0 &THEN
  DEFINE BUFFER lbe_context_scope FOR gst_context_scope.
  &GLOBAL-DEFINE lbe_context_scope yes
&ENDIF
FOR EACH gst_context_scope NO-LOCK
   WHERE gst_context_scope.session_obj = gst_session.session_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gstsstrigd.p^delete gst_context_scope":U:
    FIND FIRST lbe_context_scope EXCLUSIVE-LOCK
         WHERE ROWID(lbe_context_scope) = ROWID(gst_context_scope)
         NO-ERROR.
    IF AVAILABLE lbe_context_scope THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_context_scope"}
      END.
END.














/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gstss':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "DELETE":U, INPUT "gstss":U, INPUT BUFFER gst_session:HANDLE, INPUT BUFFER o_gst_session:HANDLE).

/* Standard bottom of DELETE trigger code */
{af/sup/aftrigendd.i}


/* Place any specific DELETE trigger customisations here */
