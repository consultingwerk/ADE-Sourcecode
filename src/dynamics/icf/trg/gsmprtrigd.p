/*********************************************************************
* Copyright (C) 2005 by Progress Software Corporation. All rights    *
* reserved.  Prior versions of this work may contain portions        *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR DELETE OF gsm_profile .

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsm_profile           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsm_profile
&SCOPED-DEFINE TRIGGER_FLA gsmpr
&SCOPED-DEFINE TRIGGER_OBJ profile_obj


DEFINE BUFFER lb_table FOR gsm_profile.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsm_profile.     /* Used for lock upgrades */

DEFINE BUFFER o_gsm_profile FOR gsm_profile.

/* Standard top of DELETE trigger code */
{af/sup/aftrigtopd.i}

  




/* Generated by ICF ERwin Template */
/* gsm_profile  gsm_profile_date_value ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_profile_date_value) = 0 &THEN
  DEFINE BUFFER lbe_profile_date_value FOR gsm_profile_date_value.
  &GLOBAL-DEFINE lbe_profile_date_value yes
&ENDIF
FOR EACH gsm_profile_date_value NO-LOCK
   WHERE gsm_profile_date_value.profile_obj = gsm_profile.profile_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsmprtrigd.p^delete gsm_profile_date_value":U:
    FIND FIRST lbe_profile_date_value EXCLUSIVE-LOCK
         WHERE ROWID(lbe_profile_date_value) = ROWID(gsm_profile_date_value)
         NO-ERROR.
    IF AVAILABLE lbe_profile_date_value THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_profile_date_value"}
      END.
END.





/* Generated by ICF ERwin Template */
/* gsm_profile  gsm_profile_numeric_value ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_profile_numeric_value) = 0 &THEN
  DEFINE BUFFER lbe_profile_numeric_value FOR gsm_profile_numeric_value.
  &GLOBAL-DEFINE lbe_profile_numeric_value yes
&ENDIF
FOR EACH gsm_profile_numeric_value NO-LOCK
   WHERE gsm_profile_numeric_value.profile_obj = gsm_profile.profile_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsmprtrigd.p^delete gsm_profile_numeric_value":U:
    FIND FIRST lbe_profile_numeric_value EXCLUSIVE-LOCK
         WHERE ROWID(lbe_profile_numeric_value) = ROWID(gsm_profile_numeric_value)
         NO-ERROR.
    IF AVAILABLE lbe_profile_numeric_value THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_profile_numeric_value"}
      END.
END.





/* Generated by ICF ERwin Template */
/* gsm_profile  gsm_profile_alpha_value ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_profile_alpha_value) = 0 &THEN
  DEFINE BUFFER lbe_profile_alpha_value FOR gsm_profile_alpha_value.
  &GLOBAL-DEFINE lbe_profile_alpha_value yes
&ENDIF
FOR EACH gsm_profile_alpha_value NO-LOCK
   WHERE gsm_profile_alpha_value.profile_obj = gsm_profile.profile_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsmprtrigd.p^delete gsm_profile_alpha_value":U:
    FIND FIRST lbe_profile_alpha_value EXCLUSIVE-LOCK
         WHERE ROWID(lbe_profile_alpha_value) = ROWID(gsm_profile_alpha_value)
         NO-ERROR.
    IF AVAILABLE lbe_profile_alpha_value THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_profile_alpha_value"}
      END.
END.





/* Generated by ICF ERwin Template */
/* gsm_profile  gsm_profile_numeric_options ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_profile_numeric_options) = 0 &THEN
  DEFINE BUFFER lbe_profile_numeric_options FOR gsm_profile_numeric_options.
  &GLOBAL-DEFINE lbe_profile_numeric_options yes
&ENDIF
FOR EACH gsm_profile_numeric_options NO-LOCK
   WHERE gsm_profile_numeric_options.profile_obj = gsm_profile.profile_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsmprtrigd.p^delete gsm_profile_numeric_options":U:
    FIND FIRST lbe_profile_numeric_options EXCLUSIVE-LOCK
         WHERE ROWID(lbe_profile_numeric_options) = ROWID(gsm_profile_numeric_options)
         NO-ERROR.
    IF AVAILABLE lbe_profile_numeric_options THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_profile_numeric_options"}
      END.
END.





/* Generated by ICF ERwin Template */
/* gsm_profile  gsm_profile_alpha_options ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_profile_alpha_options) = 0 &THEN
  DEFINE BUFFER lbe_profile_alpha_options FOR gsm_profile_alpha_options.
  &GLOBAL-DEFINE lbe_profile_alpha_options yes
&ENDIF
FOR EACH gsm_profile_alpha_options NO-LOCK
   WHERE gsm_profile_alpha_options.profile_obj = gsm_profile.profile_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsmprtrigd.p^delete gsm_profile_alpha_options":U:
    FIND FIRST lbe_profile_alpha_options EXCLUSIVE-LOCK
         WHERE ROWID(lbe_profile_alpha_options) = ROWID(gsm_profile_alpha_options)
         NO-ERROR.
    IF AVAILABLE lbe_profile_alpha_options THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_profile_alpha_options"}
      END.
END.





/* Generated by ICF ERwin Template */
/* gsm_profile  gsm_profile_history ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST gsm_profile_history WHERE
    gsm_profile_history.profile_obj = gsm_profile.profile_obj) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "gsm_profile|gsm_profile_history":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.












/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gsmpr':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "DELETE":U, INPUT "gsmpr":U, INPUT BUFFER gsm_profile:HANDLE, INPUT BUFFER o_gsm_profile:HANDLE).

/* Standard bottom of DELETE trigger code */
{af/sup/aftrigendd.i}


/* Place any specific DELETE trigger customisations here */
