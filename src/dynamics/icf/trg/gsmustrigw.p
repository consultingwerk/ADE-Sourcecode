/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation. All rights    *
* reserved. Prior versions of this work may contain portions         *
* contributed by participants of Possenet.                           *
*               PSC                                                  *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR WRITE OF gsm_user OLD BUFFER o_gsm_user.

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsm_user           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsm_user
&SCOPED-DEFINE TRIGGER_FLA gsmus
&SCOPED-DEFINE TRIGGER_OBJ user_obj


DEFINE BUFFER lb_table FOR gsm_user.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsm_user.     /* Used for lock upgrades */



/* Standard top of WRITE trigger code */
{af/sup/aftrigtopw.i}

/* properform fields if enabled for table */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gsmus':U
              AND gsc_entity_mnemonic.auto_properform_strings = YES) THEN
  RUN af/app/afpropfrmp.p (INPUT BUFFER gsm_user:HANDLE).
  



/* Generated by ICF ERwin Template */
/* gsm_login_company is the default login company for gsm_user ON CHILD UPDATE SET NULL */
IF NEW gsm_user OR  gsm_user.default_login_company_obj <> o_gsm_user.default_login_company_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST gsm_login_company WHERE
        gsm_user.default_login_company_obj = gsm_login_company.login_company_obj)) THEN DO:
        
        ASSIGN gsm_user.default_login_company_obj = 0 .
    END.
    
    
  END.

/* Generated by ICF ERwin Template */
/* gsc_language  gsm_user ON CHILD UPDATE SET NULL */
IF NEW gsm_user OR  gsm_user.language_obj <> o_gsm_user.language_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST gsc_language WHERE
        gsm_user.language_obj = gsc_language.language_obj)) THEN DO:
        
        ASSIGN gsm_user.language_obj = 0 .
    END.
    
    
  END.

/* Generated by ICF ERwin Template */
/* gsm_user_category consists of gsm_user ON CHILD UPDATE RESTRICT */
IF NEW gsm_user OR  gsm_user.user_category_obj <> o_gsm_user.user_category_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST gsm_user_category WHERE
        gsm_user.user_category_obj = gsm_user_category.user_category_obj)) AND 
      gsm_user.security_group = FALSE THEN
              DO:
                /* Cannot update child because parent does not exist ! */
                ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 103 lv-include = "gsm_user|gsm_user_category":U.
                RUN error-message (lv-errgrp, lv-errnum, lv-include).
              END.
    
    
  END.

/* Generated by ICF ERwin Template */
/* gsm_user is a profile for gsm_user ON CHILD UPDATE SET NULL */
IF NEW gsm_user OR  gsm_user.created_from_profile_user_obj <> o_gsm_user.created_from_profile_user_obj  THEN
  DO:
    
    IF NOT(CAN-FIND(FIRST lb_table WHERE
        gsm_user.created_from_profile_user_obj = lb_table.user_obj)) THEN DO:
        
        ASSIGN gsm_user.created_from_profile_user_obj = 0 .
    END.
    
  END.








IF NOT NEW gsm_user AND gsm_user.{&TRIGGER_OBJ} <> o_gsm_user.{&TRIGGER_OBJ} THEN
    DO:
        ASSIGN lv-error = YES lv-errgrp = "AF":U lv-errnum = 13 lv-include = "table object number":U.
        RUN error-message (lv-errgrp,lv-errnum,lv-include).
    END.

/* Customisations to WRITE trigger */
{icf/trg/gsmustrigw.i}



/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gsmus':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "WRITE":U, INPUT "gsmus":U, INPUT BUFFER gsm_user:HANDLE, INPUT BUFFER o_gsm_user:HANDLE).

/* Standard bottom of WRITE trigger code */
{af/sup/aftrigendw.i}



