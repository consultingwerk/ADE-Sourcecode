/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation. All rights    *
* reserved. Prior versions of this work may contain portions         *
* contributed by participants of Possenet.                           *
*               PSC                                                  *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR WRITE OF gst_extract_log OLD BUFFER o_gst_extract_log.

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gst_extract_log           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gst_extract_log
&SCOPED-DEFINE TRIGGER_FLA gstel
&SCOPED-DEFINE TRIGGER_OBJ extract_log_obj


DEFINE BUFFER lb_table FOR gst_extract_log.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gst_extract_log.     /* Used for lock upgrades */



/* Standard top of WRITE trigger code */
{af/sup/aftrigtopw.i}

/* properform fields if enabled for table */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gstel':U
              AND gsc_entity_mnemonic.auto_properform_strings = YES) THEN
  RUN af/app/afpropfrmp.p (INPUT BUFFER gst_extract_log:HANDLE).
  



/* Generated by ICF ERwin Template */
/* gsm_user  gst_extract_log ON CHILD UPDATE RESTRICT */
IF NEW gst_extract_log OR  gst_extract_log.user_obj <> o_gst_extract_log.user_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST gsm_user WHERE
        gst_extract_log.user_obj = gsm_user.user_obj)) THEN
              DO:
                /* Cannot update child because parent does not exist ! */
                ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 103 lv-include = "gst_extract_log|gsm_user":U.
                RUN error-message (lv-errgrp, lv-errnum, lv-include).
              END.
    
    
  END.

/* Generated by ICF ERwin Template */
/* gst_batch_job  gst_extract_log ON CHILD UPDATE SET NULL */
IF NEW gst_extract_log OR  gst_extract_log.batch_job_obj <> o_gst_extract_log.batch_job_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST gst_batch_job WHERE
        gst_extract_log.batch_job_obj = gst_batch_job.batch_job_obj)) THEN DO:
        
        ASSIGN gst_extract_log.batch_job_obj = 0 .
    END.
    
    
  END.

/* Generated by ICF ERwin Template */
/* gsm_report_definition has gst_extract_log ON CHILD UPDATE RESTRICT */
IF NEW gst_extract_log OR  gst_extract_log.report_definition_obj <> o_gst_extract_log.report_definition_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST gsm_report_definition WHERE
        gst_extract_log.report_definition_obj = gsm_report_definition.report_definition_obj)) THEN
              DO:
                /* Cannot update child because parent does not exist ! */
                ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 103 lv-include = "gst_extract_log|gsm_report_definition":U.
                RUN error-message (lv-errgrp, lv-errnum, lv-include).
              END.
    
    
  END.








IF NOT NEW gst_extract_log AND gst_extract_log.{&TRIGGER_OBJ} <> o_gst_extract_log.{&TRIGGER_OBJ} THEN
    DO:
        ASSIGN lv-error = YES lv-errgrp = "AF":U lv-errnum = 13 lv-include = "table object number":U.
        RUN error-message (lv-errgrp,lv-errnum,lv-include).
    END.

/* Customisations to WRITE trigger */
{icf/trg/gsteltrigw.i}



/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gstel':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "WRITE":U, INPUT "gstel":U, INPUT BUFFER gst_extract_log:HANDLE, INPUT BUFFER o_gst_extract_log:HANDLE).

/* Standard bottom of WRITE trigger code */
{af/sup/aftrigendw.i}



