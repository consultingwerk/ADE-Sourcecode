/*********************************************************************
* Copyright (C) 2005 by Progress Software Corporation. All rights    *
* reserved.  Prior versions of this work may contain portions        *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR DELETE OF gsm_menu_structure .

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsm_menu_structure           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsm_menu_structure
&SCOPED-DEFINE TRIGGER_FLA gsmms
&SCOPED-DEFINE TRIGGER_OBJ menu_structure_obj


DEFINE BUFFER lb_table FOR gsm_menu_structure.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsm_menu_structure.     /* Used for lock upgrades */

DEFINE BUFFER o_gsm_menu_structure FOR gsm_menu_structure.

/* Standard top of DELETE trigger code */
{af/sup/aftrigtopd.i}

  




/* Generated by ICF ERwin Template */
/* gsm_menu_structure is used by gsm_toolbar_menu_structure ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST gsm_toolbar_menu_structure WHERE
    gsm_toolbar_menu_structure.menu_structure_obj = gsm_menu_structure.menu_structure_obj) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "gsm_menu_structure|gsm_toolbar_menu_structure":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.



/* Generated by ICF ERwin Template */
/* gsm_menu_structure is the child of gsm_menu_structure_item ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST gsm_menu_structure_item WHERE
    gsm_menu_structure_item.child_menu_structure_obj = gsm_menu_structure.menu_structure_obj) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "gsm_menu_structure|gsm_menu_structure_item":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.



/* Generated by ICF ERwin Template */
/* gsm_menu_structure contains gsm_menu_structure_item ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_menu_structure_item) = 0 &THEN
  DEFINE BUFFER lbe_menu_structure_item FOR gsm_menu_structure_item.
  &GLOBAL-DEFINE lbe_menu_structure_item yes
&ENDIF
FOR EACH gsm_menu_structure_item NO-LOCK
   WHERE gsm_menu_structure_item.menu_structure_obj = gsm_menu_structure.menu_structure_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsmmstrigd.p^delete gsm_menu_structure_item":U:
    FIND FIRST lbe_menu_structure_item EXCLUSIVE-LOCK
         WHERE ROWID(lbe_menu_structure_item) = ROWID(gsm_menu_structure_item)
         NO-ERROR.
    IF AVAILABLE lbe_menu_structure_item THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_menu_structure_item"}
      END.
END.





/* Generated by ICF ERwin Template */
/* gsm_menu_structure is used by gsm_object_menu_structure ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_object_menu_structure) = 0 &THEN
  DEFINE BUFFER lbe_object_menu_structure FOR gsm_object_menu_structure.
  &GLOBAL-DEFINE lbe_object_menu_structure yes
&ENDIF
FOR EACH gsm_object_menu_structure NO-LOCK
   WHERE gsm_object_menu_structure.menu_structure_obj = gsm_menu_structure.menu_structure_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsmmstrigd.p^delete gsm_object_menu_structure":U:
    FIND FIRST lbe_object_menu_structure EXCLUSIVE-LOCK
         WHERE ROWID(lbe_object_menu_structure) = ROWID(gsm_object_menu_structure)
         NO-ERROR.
    IF AVAILABLE lbe_object_menu_structure THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_object_menu_structure"}
      END.
END.














/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gsmms':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "DELETE":U, INPUT "gsmms":U, INPUT BUFFER gsm_menu_structure:HANDLE, INPUT BUFFER o_gsm_menu_structure:HANDLE).

/* Standard bottom of DELETE trigger code */
{af/sup/aftrigendd.i}


/* Place any specific DELETE trigger customisations here */

{icf/trg/gsmmstrigd.i}




