/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation. All rights    *
* reserved. Prior versions of this work may contain portions         *
* contributed by participants of Possenet.                           *
*               PSC                                                  *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR WRITE OF gsm_filter_data OLD BUFFER o_gsm_filter_data.

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsm_filter_data           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsm_filter_data
&SCOPED-DEFINE TRIGGER_FLA gsmfd
&SCOPED-DEFINE TRIGGER_OBJ filter_data_obj


DEFINE BUFFER lb_table FOR gsm_filter_data.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsm_filter_data.     /* Used for lock upgrades */



/* Standard top of WRITE trigger code */
{af/sup/aftrigtopw.i}

/* properform fields if enabled for table */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gsmfd':U
              AND gsc_entity_mnemonic.auto_properform_strings = YES) THEN
  RUN af/app/afpropfrmp.p (INPUT BUFFER gsm_filter_data:HANDLE).
  



/* Generated by ICF ERwin Template */
/* gsm_filter_set contains gsm_filter_data ON CHILD UPDATE RESTRICT */
IF NEW gsm_filter_data OR  gsm_filter_data.filter_set_obj <> o_gsm_filter_data.filter_set_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST gsm_filter_set WHERE
        gsm_filter_data.filter_set_obj = gsm_filter_set.filter_set_obj)) THEN
              DO:
                /* Cannot update child because parent does not exist ! */
                ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 103 lv-include = "gsm_filter_data|gsm_filter_set":U.
                RUN error-message (lv-errgrp, lv-errnum, lv-include).
              END.
    
    
  END.

/* Generated by ICF ERwin Template */
/* gsc_entity_mnemonic has gsm_filter_data ON CHILD UPDATE RESTRICT */
IF NEW gsm_filter_data OR  gsm_filter_data.owning_entity_mnemonic <> o_gsm_filter_data.owning_entity_mnemonic  THEN
  DO:
    IF NOT(CAN-FIND(FIRST gsc_entity_mnemonic WHERE
        gsm_filter_data.owning_entity_mnemonic = gsc_entity_mnemonic.entity_mnemonic)) THEN
              DO:
                /* Cannot update child because parent does not exist ! */
                ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 103 lv-include = "gsm_filter_data|gsc_entity_mnemonic":U.
                RUN error-message (lv-errgrp, lv-errnum, lv-include).
              END.
    
    
  END.








IF NOT NEW gsm_filter_data AND gsm_filter_data.{&TRIGGER_OBJ} <> o_gsm_filter_data.{&TRIGGER_OBJ} THEN
    DO:
        ASSIGN lv-error = YES lv-errgrp = "AF":U lv-errnum = 13 lv-include = "table object number":U.
        RUN error-message (lv-errgrp,lv-errnum,lv-include).
    END.

/* Customisations to WRITE trigger */
{icf/trg/gsmfdtrigw.i}



/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gsmfd':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "WRITE":U, INPUT "gsmfd":U, INPUT BUFFER gsm_filter_data:HANDLE, INPUT BUFFER o_gsm_filter_data:HANDLE).

/* Standard bottom of WRITE trigger code */
{af/sup/aftrigendw.i}



