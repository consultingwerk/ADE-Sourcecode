/*********************************************************************
* Copyright (C) 2005 by Progress Software Corporation. All rights    *
* reserved.  Prior versions of this work may contain portions        *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR DELETE OF gsm_flow .

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsm_flow           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsm_flow
&SCOPED-DEFINE TRIGGER_FLA gsmfw
&SCOPED-DEFINE TRIGGER_OBJ flow_obj


DEFINE BUFFER lb_table FOR gsm_flow.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsm_flow.     /* Used for lock upgrades */

DEFINE BUFFER o_gsm_flow FOR gsm_flow.

/* Standard top of DELETE trigger code */
{af/sup/aftrigtopd.i}

  




/* Generated by ICF ERwin Template */
/* gsm_flow is run during gsm_flow_step ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST gsm_flow_step WHERE
    gsm_flow_step.flow_step_flow_obj = gsm_flow.flow_obj) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "gsm_flow|gsm_flow_step":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.



/* Generated by ICF ERwin Template */
/* gsm_flow is used as gsm_startup_flow ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST gsm_startup_flow WHERE
    gsm_startup_flow.flow_obj = gsm_flow.flow_obj) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "gsm_flow|gsm_startup_flow":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.



/* Generated by ICF ERwin Template */
/* gsm_flow consists of gsm_flow_step ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_flow_step) = 0 &THEN
  DEFINE BUFFER lbe_flow_step FOR gsm_flow_step.
  &GLOBAL-DEFINE lbe_flow_step yes
&ENDIF
FOR EACH gsm_flow_step NO-LOCK
   WHERE gsm_flow_step.flow_obj = gsm_flow.flow_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsmfwtrigd.p^delete gsm_flow_step":U:
    FIND FIRST lbe_flow_step EXCLUSIVE-LOCK
         WHERE ROWID(lbe_flow_step) = ROWID(gsm_flow_step)
         NO-ERROR.
    IF AVAILABLE lbe_flow_step THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_flow_step"}
      END.
END.














/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gsmfw':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "DELETE":U, INPUT "gsmfw":U, INPUT BUFFER gsm_flow:HANDLE, INPUT BUFFER o_gsm_flow:HANDLE).

/* Standard bottom of DELETE trigger code */
{af/sup/aftrigendd.i}


/* Place any specific DELETE trigger customisations here */
