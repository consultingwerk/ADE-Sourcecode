/*********************************************************************
* Copyright (C) 2005 by Progress Software Corporation. All rights    *
* reserved.  Prior versions of this work may contain portions        *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR DELETE OF gsc_product .

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsc_product           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsc_product
&SCOPED-DEFINE TRIGGER_FLA gscpr
&SCOPED-DEFINE TRIGGER_OBJ product_obj


DEFINE BUFFER lb_table FOR gsc_product.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsc_product.     /* Used for lock upgrades */

DEFINE BUFFER o_gsc_product FOR gsc_product.

/* Standard top of DELETE trigger code */
{af/sup/aftrigtopd.i}

  




/* Generated by ICF ERwin Template */
/* gsc_product  gsm_menu_structure ON PARENT DELETE SET NULL */

&IF DEFINED(lbe_menu_structure) = 0 &THEN
  DEFINE BUFFER lbe_menu_structure FOR gsm_menu_structure.
  &GLOBAL-DEFINE lbe_menu_structure yes
&ENDIF
FOR EACH gsm_menu_structure NO-LOCK
   WHERE gsm_menu_structure.product_obj = gsc_product.product_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gscprtrigd.p^update gsm_menu_structure":U:
    FIND FIRST lbe_menu_structure EXCLUSIVE-LOCK
         WHERE ROWID(lbe_menu_structure) = ROWID(gsm_menu_structure)
         NO-ERROR.
    IF AVAILABLE lbe_menu_structure THEN
      DO:
        
        ASSIGN lbe_menu_structure.product_obj = 0 .
      END.
END.



/* Generated by ICF ERwin Template */
/* gsc_product is made up of gsc_product_module ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_product_module) = 0 &THEN
  DEFINE BUFFER lbe_product_module FOR gsc_product_module.
  &GLOBAL-DEFINE lbe_product_module yes
&ENDIF
FOR EACH gsc_product_module NO-LOCK
   WHERE gsc_product_module.product_obj = gsc_product.product_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gscprtrigd.p^delete gsc_product_module":U:
    FIND FIRST lbe_product_module EXCLUSIVE-LOCK
         WHERE ROWID(lbe_product_module) = ROWID(gsc_product_module)
         NO-ERROR.
    IF AVAILABLE lbe_product_module THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_product_module"}
      END.
END.














/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gscpr':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "DELETE":U, INPUT "gscpr":U, INPUT BUFFER gsc_product:HANDLE, INPUT BUFFER o_gsc_product:HANDLE).

/* Standard bottom of DELETE trigger code */
{af/sup/aftrigendd.i}


/* Place any specific DELETE trigger customisations here */
