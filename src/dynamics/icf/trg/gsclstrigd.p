/*********************************************************************
* Copyright (C) 2005 by Progress Software Corporation. All rights    *
* reserved.  Prior versions of this work may contain portions        *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR DELETE OF gsc_logical_service .

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsc_logical_service           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsc_logical_service
&SCOPED-DEFINE TRIGGER_FLA gscls
&SCOPED-DEFINE TRIGGER_OBJ logical_service_obj


DEFINE BUFFER lb_table FOR gsc_logical_service.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsc_logical_service.     /* Used for lock upgrades */

DEFINE BUFFER o_gsc_logical_service FOR gsc_logical_service.

/* Standard top of DELETE trigger code */
{af/sup/aftrigtopd.i}

  




/* Generated by ICF ERwin Template */
/* gsc_logical_service abstracts gsm_session_service ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_session_service) = 0 &THEN
  DEFINE BUFFER lbe_session_service FOR gsm_session_service.
  &GLOBAL-DEFINE lbe_session_service yes
&ENDIF
FOR EACH gsm_session_service NO-LOCK
   WHERE gsm_session_service.logical_service_obj = gsc_logical_service.logical_service_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsclstrigd.p^delete gsm_session_service":U:
    FIND FIRST lbe_session_service EXCLUSIVE-LOCK
         WHERE ROWID(lbe_session_service) = ROWID(gsm_session_service)
         NO-ERROR.
    IF AVAILABLE lbe_session_service THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_session_service"}
      END.
END.





/* Generated by ICF ERwin Template */
/* gsc_logical_service specifies the default for the gsc_service_type ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST gsc_service_type WHERE
    gsc_service_type.default_logical_service_obj = gsc_logical_service.logical_service_obj) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "gsc_logical_service|gsc_service_type":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.



/* Generated by ICF ERwin Template */
/* gsc_logical_service provides partition information to gsm_valid_object_partition ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_valid_object_partition) = 0 &THEN
  DEFINE BUFFER lbe_valid_object_partition FOR gsm_valid_object_partition.
  &GLOBAL-DEFINE lbe_valid_object_partition yes
&ENDIF
FOR EACH gsm_valid_object_partition NO-LOCK
   WHERE gsm_valid_object_partition.logical_service_obj = gsc_logical_service.logical_service_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gsclstrigd.p^delete gsm_valid_object_partition":U:
    FIND FIRST lbe_valid_object_partition EXCLUSIVE-LOCK
         WHERE ROWID(lbe_valid_object_partition) = ROWID(gsm_valid_object_partition)
         NO-ERROR.
    IF AVAILABLE lbe_valid_object_partition THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_valid_object_partition"}
      END.
END.














/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gscls':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "DELETE":U, INPUT "gscls":U, INPUT BUFFER gsc_logical_service:HANDLE, INPUT BUFFER o_gsc_logical_service:HANDLE).

/* Standard bottom of DELETE trigger code */
{af/sup/aftrigendd.i}


/* Place any specific DELETE trigger customisations here */
