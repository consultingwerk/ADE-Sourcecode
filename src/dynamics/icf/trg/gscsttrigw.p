/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation. All rights    *
* reserved. Prior versions of this work may contain portions         *
* contributed by participants of Possenet.                           *
*               PSC                                                  *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR WRITE OF gsc_service_type OLD BUFFER o_gsc_service_type.

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsc_service_type           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsc_service_type
&SCOPED-DEFINE TRIGGER_FLA gscst
&SCOPED-DEFINE TRIGGER_OBJ service_type_obj


DEFINE BUFFER lb_table FOR gsc_service_type.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsc_service_type.     /* Used for lock upgrades */



/* Standard top of WRITE trigger code */
{af/sup/aftrigtopw.i}

/* properform fields if enabled for table */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gscst':U
              AND gsc_entity_mnemonic.auto_properform_strings = YES) THEN
  RUN af/app/afpropfrmp.p (INPUT BUFFER gsc_service_type:HANDLE).
  



/* Generated by ICF ERwin Template */
/* ryc_smartobject is the management object for gsc_service_type ON CHILD UPDATE RESTRICT */
IF NEW gsc_service_type OR  gsc_service_type.management_object_obj <> o_gsc_service_type.management_object_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST ryc_smartobject WHERE
        gsc_service_type.management_object_obj = ryc_smartobject.smartobject_obj)) THEN
              DO:
                /* Cannot update child because parent does not exist ! */
                ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 103 lv-include = "gsc_service_type|ryc_smartobject":U.
                RUN error-message (lv-errgrp, lv-errnum, lv-include).
              END.
    
    
  END.

/* Generated by ICF ERwin Template */
/* ryc_smartobject maintains gsc_service_type ON CHILD UPDATE RESTRICT */
IF NEW gsc_service_type OR  gsc_service_type.maintenance_object_obj <> o_gsc_service_type.maintenance_object_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST ryc_smartobject WHERE
        gsc_service_type.maintenance_object_obj = ryc_smartobject.smartobject_obj)) THEN
              DO:
                /* Cannot update child because parent does not exist ! */
                ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 103 lv-include = "gsc_service_type|ryc_smartobject":U.
                RUN error-message (lv-errgrp, lv-errnum, lv-include).
              END.
    
    
  END.

/* Generated by ICF ERwin Template */
/* gsc_logical_service specifies the default for the gsc_service_type ON CHILD UPDATE SET NULL */
IF NEW gsc_service_type OR  gsc_service_type.default_logical_service_obj <> o_gsc_service_type.default_logical_service_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST gsc_logical_service WHERE
        gsc_service_type.default_logical_service_obj = gsc_logical_service.logical_service_obj)) THEN DO:
        
        ASSIGN gsc_service_type.default_logical_service_obj = 0 .
    END.
    
    
  END.








IF NOT NEW gsc_service_type AND gsc_service_type.{&TRIGGER_OBJ} <> o_gsc_service_type.{&TRIGGER_OBJ} THEN
    DO:
        ASSIGN lv-error = YES lv-errgrp = "AF":U lv-errnum = 13 lv-include = "table object number":U.
        RUN error-message (lv-errgrp,lv-errnum,lv-include).
    END.

/* Customisations to WRITE trigger */
{icf/trg/gscsttrigw.i}



/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gscst':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "WRITE":U, INPUT "gscst":U, INPUT BUFFER gsc_service_type:HANDLE, INPUT BUFFER o_gsc_service_type:HANDLE).

/* Standard bottom of WRITE trigger code */
{af/sup/aftrigendw.i}



