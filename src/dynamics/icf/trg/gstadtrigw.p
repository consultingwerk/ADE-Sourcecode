/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation. All rights    *
* reserved. Prior versions of this work may contain portions         *
* contributed by participants of Possenet.                           *
*               PSC                                                  *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR WRITE OF gst_audit OLD BUFFER o_gst_audit.

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gst_audit           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gst_audit
&SCOPED-DEFINE TRIGGER_FLA gstad
&SCOPED-DEFINE TRIGGER_OBJ audit_obj


DEFINE BUFFER lb_table FOR gst_audit.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gst_audit.     /* Used for lock upgrades */



/* Standard top of WRITE trigger code */
{af/sup/aftrigtopw.i}

/* properform fields if enabled for table */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gstad':U
              AND gsc_entity_mnemonic.auto_properform_strings = YES) THEN
  RUN af/app/afpropfrmp.p (INPUT BUFFER gst_audit:HANDLE).
  



/* Generated by ICF ERwin Template */
/* gsc_entity_mnemonic has gst_audit ON CHILD UPDATE RESTRICT */
IF NEW gst_audit OR  gst_audit.owning_entity_mnemonic <> o_gst_audit.owning_entity_mnemonic  THEN
  DO:
    IF NOT(CAN-FIND(FIRST gsc_entity_mnemonic WHERE
        gst_audit.owning_entity_mnemonic = gsc_entity_mnemonic.entity_mnemonic)) THEN
              DO:
                /* Cannot update child because parent does not exist ! */
                ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 103 lv-include = "gst_audit|gsc_entity_mnemonic":U.
                RUN error-message (lv-errgrp, lv-errnum, lv-include).
              END.
    
    
  END.

/* Generated by ICF ERwin Template */
/* gsm_user caused gst_audit ON CHILD UPDATE RESTRICT */
IF NEW gst_audit OR  gst_audit.audit_user_obj <> o_gst_audit.audit_user_obj  THEN
  DO:
    IF NOT(CAN-FIND(FIRST gsm_user WHERE
        gst_audit.audit_user_obj = gsm_user.user_obj)) THEN
              DO:
                /* Cannot update child because parent does not exist ! */
                ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 103 lv-include = "gst_audit|gsm_user":U.
                RUN error-message (lv-errgrp, lv-errnum, lv-include).
              END.
    
    
  END.








IF NOT NEW gst_audit AND gst_audit.{&TRIGGER_OBJ} <> o_gst_audit.{&TRIGGER_OBJ} THEN
    DO:
        ASSIGN lv-error = YES lv-errgrp = "AF":U lv-errnum = 13 lv-include = "table object number":U.
        RUN error-message (lv-errgrp,lv-errnum,lv-include).
    END.

/* Customisations to WRITE trigger */
{icf/trg/gstadtrigw.i}

/* NO audit log updates for the Auditing table - will get us in a bunch of recursion trouble. */

/* Standard bottom of WRITE trigger code */
{af/sup/aftrigendw.i}



