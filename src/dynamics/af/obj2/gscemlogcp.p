&ANALYZE-SUSPEND _VERSION-NUMBER AB_v9r12
/* Procedure Description
"Data Logic Procedure Template
 
Use this template to create  a Data Logic Procedure."
*/
&ANALYZE-RESUME
{adecomm/appserv.i}
DEFINE VARIABLE h_Astra                    AS HANDLE          NO-UNDO.
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Check Version Notes Wizard" DataLogicProcedure _INLINE
/* Actions: af/cod/aftemwizcw.w ? ? ? ? */
/* MIP Update Version Notes Wizard
Check object version notes.
af/cod/aftemwizpw.w
*/
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Update-Object-Version" DataLogicProcedure _INLINE
/* Actions: ? ? ? ? af/sup/afverxftrp.p */
/* This has to go above the definitions sections, as that is what it modifies.
   If its not, then the definitions section will have been saved before the
   XFTR code kicks in and changes it */
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Definition Comments Wizard" DataLogicProcedure _INLINE
/* Actions: ? af/cod/aftemwizcw.w ? ? ? */
/* Program Definition Comment Block Wizard
Welcome to the Program Definition Comment Block Wizard. Press Next to proceed.
af/cod/aftemwizpw.w
*/
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS DataLogicProcedure 
/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation. All rights    *
* reserved. Prior versions of this work may contain portions         *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/
/*---------------------------------------------------------------------------------
  File: gscemlogcp.p
 
  Description:  gsc_entity_mnemonic Data Logicocedure Library Template
 
  Purpose:      A procedure library (PLIP) to support the maintenance of the gsc_entity_mnemonic
                The following internal procedures may be added or modified
                to act as validation to creation, modification, or deletion of
                records in the database table
 
                Client-side:
                rowObjectValidate***
 
                Server-side upon create:
                createPreTransValidate***
                createBeginTransValidate
                createEndTransValidate
                createPostTransValidate
 
                Server-side upon write (create and modify):
                writePreTransValidate***
                writeBeginTransValidate
                writeEndTransValidate
                writePostTransValidate
 
                Server-side upon delete:
                deletePreTransValidate
                deleteBeginTransValidate
                deleteEndTransValidate
                deletePostTransValidate
 
                *** The rowObjectValidate, createPreTransValidate and writePreTransValidate
                internal procedures are automatically generated by the SDO generator
 
  Parameters:
 
  History:
  --------
  (v:010000)    Task:   101000047   UserRef:    
                Date:   09/28/2001  Author:     Johan Meyer
 
  Update Notes: Added function isFieldBlank to template of SDO Logic Procedure
 
  (v:010001)    Task:    90000119   UserRef:    posse
                Date:   06/05/2001  Author:     Haavard Danielsen
 
  Update Notes: Point to src/adm2/logic.i
 
---------------------------------------------------------------------------------*/
/*                   This .W file was created with the Progress UIB.             */
/*-------------------------------------------------------------------------------*/
 
/* ***************************  Definitions  ************************** */
/* MIP-GET-OBJECT-VERSION pre-processors
   The following pre-processors are maintained automatically when the object is
   saved. They pull the object and version from Roundtable if possible so that it
   can be displayed in the about window of the container */
 
&scop object-name       gscemlogcp.p
DEFINE VARIABLE lv_this_object_name AS CHARACTER INITIAL "{&object-name}":U NO-UNDO.
&scop object-version    000000
 
/* object identifying preprocessor */
&glob   AstraPlip    yes
 
DEFINE VARIABLE cObjectName         AS CHARACTER NO-UNDO.
 
ASSIGN cObjectName = "{&object-name}":U.
 
&scop   mip-notify-user-on-plip-close   NO
 
 
/* Data Preprocessor Definitions */
&GLOB DATA-LOGIC-TABLE gsc_entity_mnemonic
&GLOB DATA-FIELD-DEFS  "af/obj2/gscemfullo.i"

DEFINE VARIABLE ghDSAPI AS HANDLE     NO-UNDO.

/* Error handling definitions */
{checkerr.i &define-only = YES}

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-PREPROCESSOR-BLOCK 

/* ********************  Preprocessor Definitions  ******************** */

&Scoped-define PROCEDURE-TYPE DataLogicProcedure
&Scoped-define DB-AWARE yes


/* Db-Required definitions. */
&IF DEFINED(DB-REQUIRED) = 0 &THEN
    &GLOBAL-DEFINE DB-REQUIRED TRUE
&ENDIF
&GLOBAL-DEFINE DB-REQUIRED-START   &IF {&DB-REQUIRED} &THEN
&GLOBAL-DEFINE DB-REQUIRED-END     &ENDIF





/* _UIB-PREPROCESSOR-BLOCK-END */
&ANALYZE-RESUME


/* ************************  Function Prototypes ********************** */

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION-FORWARD isFieldBlank DataLogicProcedure 
FUNCTION isFieldBlank RETURNS LOGICAL
  ( INPUT pcFieldValue AS CHARACTER )  FORWARD.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


/* *********************** Procedure Settings ************************ */

&ANALYZE-SUSPEND _PROCEDURE-SETTINGS
/* Settings for THIS-PROCEDURE
   Type: DataLogicProcedure
   Allow: 
   Frames: 0
   Add Fields to: Neither
   Other Settings: CODE-ONLY COMPILE APPSERVER DB-AWARE
 */
&ANALYZE-RESUME _END-PROCEDURE-SETTINGS

/* *************************  Create Window  ************************** */

&ANALYZE-SUSPEND _CREATE-WINDOW
/* DESIGN Window definition (used by the UIB) 
  CREATE WINDOW DataLogicProcedure ASSIGN
         HEIGHT             = 18.43
         WIDTH              = 73.4.
/* END WINDOW DEFINITION */
                                                                        */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _INCLUDED-LIB DataLogicProcedure 
/* ************************* Included-Libraries *********************** */
 
{src/adm2/logic.i}

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


 


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _MAIN-BLOCK DataLogicProcedure 


/* ***************************  Main Block  ******************************* */
 
{ry/app/ryplipmain.i}

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


/* **********************  Internal Procedures  *********************** */

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE killPlip DataLogicProcedure 
PROCEDURE killPlip :
/*------------------------------------------------------------------------------
  Purpose:     entry point to instantly kill the plip if it should get lost in memory
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
 
  {ry/app/ryplipkill.i}
 
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE objectDescription DataLogicProcedure 
PROCEDURE objectDescription :
/*------------------------------------------------------------------------------
  Purpose:     Pass out a description of the PLIP, used in Plip temp-table
  Parameters:  <none>
  Notes:       This should be changed manually for each plip
------------------------------------------------------------------------------*/
    DEFINE OUTPUT PARAMETER cDescription AS CHARACTER NO-UNDO.

    ASSIGN cDescription = "DataLogic Procedure for gscemfullo.w (Entity Mnemonic SDO)".

    ASSIGN ERROR-STATUS:ERROR = NO.
    RETURN.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE plipSetup DataLogicProcedure 
PROCEDURE plipSetup :
/*------------------------------------------------------------------------------
  Purpose:    Run by main-block of PLIP at startup of PLIP
  Parameters: <none>
  Notes:       
------------------------------------------------------------------------------*/
 
  {ry/app/ryplipsetu.i}  
 
  /* Start the Dataset API procedure */
  RUN startProcedure IN THIS-PROCEDURE ("ONCE|af/app/gscddxmlp.p":U, 
                                        OUTPUT ghDSAPI).

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE plipShutdown DataLogicProcedure 
PROCEDURE plipShutdown :
/*------------------------------------------------------------------------------
  Purpose:     This procedure will be run just before the calling program 
               terminates
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
 
  {ry/app/ryplipshut.i}
 
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE rowObjectValidate DataLogicProcedure 
PROCEDURE rowObjectValidate :
/*------------------------------------------------------------------------------
  Purpose:     Procedure used to validate RowObject record client-side
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/ 
    DEFINE VARIABLE cMessageList    AS CHARACTER    NO-UNDO.
    DEFINE VARIABLE cValueList      AS CHARACTER    NO-UNDO.
    
    IF isFieldBlank(b_gsc_entity_mnemonic.entity_mnemonic_short_desc) THEN
        ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                    {aferrortxt.i 'AF' '1' 'gsc_entity_mnemonic' 'entity_mnemonic_short_desc' "'Entity Mnemonic Short Description'"}.
    
    IF isFieldBlank(b_gsc_entity_mnemonic.entity_mnemonic_description) THEN
        ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                    {aferrortxt.i 'AF' '1' 'gsc_entity_mnemonic' 'entity_mnemonic_description' "'Entity Mnemonic Description'"}.
    
    IF isFieldBlank(b_gsc_entity_mnemonic.entity_mnemonic) THEN
        ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                    {aferrortxt.i 'AF' '1' 'gsc_entity_mnemonic' 'entity_mnemonic' "'Entity Mnemonic'"}.
    
    IF isFieldBlank(b_gsc_entity_mnemonic.entity_dbname) THEN
        ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                    {aferrortxt.i 'AF' '1' 'gsc_entity_mnemonic' 'entity_dbname' "'Entity DB Name'"}.

    ASSIGN ERROR-STATUS:ERROR = NO.
    RETURN cMessageList.
END PROCEDURE.  /* rowObjectValidate */

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE writeEndTransValidate DataLogicProcedure  _DB-REQUIRED
PROCEDURE writeEndTransValidate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEFINE VARIABLE hRDM                AS HANDLE                       NO-UNDO.
    DEFINE VARIABLE cMessageText        AS CHARACTER                    NO-UNDO.
    DEFINE VARIABLE cTableName          AS CHARACTER  NO-UNDO.

    ASSIGN b_gsc_entity_mnemonic.EntityObjectClass         = DYNAMIC-FUNCTION("getUserProperty":U IN TARGET-PROCEDURE, "EntityObjectClass":U)
           b_gsc_entity_mnemonic.EntityObjectProductModule = DYNAMIC-FUNCTION("getUserProperty":U IN TARGET-PROCEDURE, "EntityObjectProductModule":U)
           b_gsc_entity_mnemonic.AssociateDataFields       = LOGICAL(DYNAMIC-FUNCTION("getUserProperty":U IN TARGET-PROCEDURE, "AssociateDataFields":U))
           NO-ERROR.

    /* Check if the object is in the Repository */
    IF NOT CAN-FIND(FIRST ryc_smartObject WHERE ryc_smartObject.object_filename = b_gsc_entity_mnemonic.entity_mnemonic_description) THEN
    DO:
        ASSIGN hRDM = DYNAMIC-FUNCTION("getManagerHandle":U IN TARGET-PROCEDURE,
                                       INPUT "RepositoryDesignManager":U).
    
        IF VALID-HANDLE(hRDM) THEN
        DO:
            RUN generateEntityObject IN hRDM ( INPUT b_gsc_entity_mnemonic.entity_dbname + CHR(3) + b_gsc_entity_mnemonic.entity_mnemonic_description,
                                               INPUT b_gsc_entity_mnemonic.EntityObjectClass,
                                               INPUT b_gsc_entity_mnemonic.EntityObjectProductModule,
                                               INPUT b_gsc_entity_mnemonic.auto_properform,
                                               INPUT b_gsc_entity_mnemonic.table_prefix_length,
                                               INPUT b_gsc_entity_mnemonic.field_name_separator,
                                               INPUT SUBSTRING(STRING(b_gsc_entity_mnemonic.auditing_enabled), 1, 1),
                                               INPUT "":U,        /* pcDescFieldQualifiers */
                                               INPUT "":U,        /* pcKeyFieldQualifiers  */
                                               INPUT "":U,        /* pcObjFieldQualifiers  */
                                               INPUT b_gsc_entity_mnemonic.version_data,
                                               INPUT b_gsc_entity_mnemonic.deploy_data,
                                               INPUT b_gsc_entity_mnemonic.reuse_deleted_keys,
                                               INPUT b_gsc_entity_mnemonic.AssociateDataFields  ) NO-ERROR.
            ASSIGN cMessageText = RETURN-VALUE.
        END.    /* Valid design manager handle */
    END.    /* not yet in Repository. */

    /* This code is here to make sure that the record version data is properly updated
       after the record versioning fields have been changed. */
    IF b_gsc_entity_mnemonic.RVDataExists AND
       (old_gsc_entity_mnemonic.version_data             <> b_gsc_entity_mnemonic.version_data           OR
        old_gsc_entity_mnemonic.reuse_deleted_keys       <> b_gsc_entity_mnemonic.reuse_deleted_keys     OR
        old_gsc_entity_mnemonic.table_has_object_field   <> b_gsc_entity_mnemonic.table_has_object_field OR
        old_gsc_entity_mnemonic.entity_key_field         <> b_gsc_entity_mnemonic.entity_key_field       OR
        old_gsc_entity_mnemonic.entity_object_field      <> b_gsc_entity_mnemonic.entity_object_field )  THEN
    DO:

        cTableName = b_gsc_entity_mnemonic.entity_mnemonic_description.
        IF b_gsc_entity_mnemonic.entity_dbname <> "":U THEN
          cTableName = b_gsc_entity_mnemonic.entity_dbname + ".":U + cTableName.

        RUN changeRVCriteria IN ghDSAPI
          (b_gsc_entity_mnemonic.entity_mnemonic,
           cTableName,
           old_gsc_entity_mnemonic.version_data,
           b_gsc_entity_mnemonic.version_data,
           old_gsc_entity_mnemonic.table_has_object_field,
           b_gsc_entity_mnemonic.table_has_object_field,
           old_gsc_entity_mnemonic.entity_object_field,
           b_gsc_entity_mnemonic.entity_object_field, 
           old_gsc_entity_mnemonic.entity_key_field,
           b_gsc_entity_mnemonic.entity_key_field,
           old_gsc_entity_mnemonic.reuse_deleted_keys,
           b_gsc_entity_mnemonic.reuse_deleted_keys).
    END.
    
    ASSIGN ERROR-STATUS:ERROR = NO.
    RETURN cMessageText.
    
END PROCEDURE.  /* createEndTransValidate */

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE writePreTransValidate DataLogicProcedure  _DB-REQUIRED
PROCEDURE writePreTransValidate :
/*------------------------------------------------------------------------------
  Purpose:     Procedure used to validate records server-side before the transaction scope upon write
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEFINE VARIABLE cMessageList        AS CHARACTER                    NO-UNDO.
    DEFINE VARIABLE cValueList          AS CHARACTER                    NO-UNDO.

    IF NOT isCreate() AND
       CAN-FIND(FIRST gsc_entity_mnemonic WHERE
                      gsc_entity_mnemonic.entity_mnemonic = b_gsc_entity_mnemonic.entity_mnemonic AND
                      ROWID(gsc_entity_mnemonic) <> TO-ROWID(ENTRY(1,b_gsc_entity_mnemonic.RowIDent))) THEN
        ASSIGN cValueList   = STRING(b_gsc_entity_mnemonic.entity_mnemonic)
               cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U)  
                            + {aferrortxt.i 'AF' '8' 'gsc_entity_mnemonic' '' "'entity_mnemonic, '" cValueList }.

    /** We need this information for later. These are calculated fields that are
     *  derived from the Repository. They are updatable because calculated fields 
     *  we use the values to generate the relevant entity objects.
     *  ----------------------------------------------------------------------- **/
    DYNAMIC-FUNCTION("setUserProperty":U IN TARGET-PROCEDURE,
                     INPUT "EntityObjectClass":U,
                     INPUT b_gsc_entity_mnemonic.EntityObjectClass ).

    DYNAMIC-FUNCTION("setUserProperty":U IN TARGET-PROCEDURE,
                     INPUT "EntityObjectProductModule":U,
                     INPUT b_gsc_entity_mnemonic.EntityObjectProductModule ).

    DYNAMIC-FUNCTION("setUserProperty":U IN TARGET-PROCEDURE,
                     INPUT "AssociateDataFields":U,
                     INPUT STRING(b_gsc_entity_mnemonic.AssociateDataFields) ).

    ASSIGN ERROR-STATUS:ERROR = NO.
    RETURN cMessageList.
END PROCEDURE.  /* writePreTransValidate */

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

/* ************************  Function Implementations ***************** */

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION isFieldBlank DataLogicProcedure 
FUNCTION isFieldBlank RETURNS LOGICAL
  ( INPUT pcFieldValue AS CHARACTER ) :
/*------------------------------------------------------------------------------
  Purpose:  Checks whether a character field is blank
    Notes:  
------------------------------------------------------------------------------*/
 
  IF LENGTH(TRIM(pcFieldValue)) = 0 OR LENGTH(TRIM(pcFieldValue)) = ? THEN
    RETURN TRUE.
  ELSE
    RETURN FALSE.   /* Function return value. */
 
END FUNCTION.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

