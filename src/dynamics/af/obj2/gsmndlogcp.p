&ANALYZE-SUSPEND _VERSION-NUMBER UIB_v8r12
&ANALYZE-RESUME
{adecomm/appserv.i}
DEFINE VARIABLE h_Astra                    AS HANDLE          NO-UNDO.
DEFINE VARIABLE h_Astra2                   AS HANDLE          NO-UNDO.
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Check Version Notes Wizard" DataLogicProcedure _INLINE
/* Actions: af/cod/aftemwizcw.w ? ? ? ? */
/* MIP Update Version Notes Wizard
Check object version notes.
af/cod/aftemwizpw.w
*/
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Update-Object-Version" DataLogicProcedure _INLINE
/* Actions: ? ? ? ? af/sup/afverxftrp.p */
/* This has to go above the definitions sections, as that is what it modifies.
   If its not, then the definitions section will have been saved before the
   XFTR code kicks in and changes it */
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Definition Comments Wizard" DataLogicProcedure _INLINE
/* Actions: ? af/cod/aftemwizcw.w ? ? ? */
/* Program Definition Comment Block Wizard
Welcome to the Program Definition Comment Block Wizard. Press Next to proceed.
af/cod/aftemwizpw.w
*/
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS DataLogicProcedure 
/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation. All rights    *
* reserved. Prior versions of this work may contain portions         *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/
/*---------------------------------------------------------------------------------
  File: rytemlogic.p

  Description:  gsm_node Data Logic Procedure Library Template

  Purpose:      A procedure library (PLIP) to support the maintenance of the gsm_node table
                The following internal procedures may be added or modified
                to act as validation to creation, modification, or deletion of
                records in the database table

                Client-side:
                rowObjectValidate***

                Server-side upon create:
                createPreTransValidate***
                createBeginTransValidate
                createEndTransValidate
                createPostTransValidate

                Server-side upon write (create and modify):
                writePreTransValidate***
                writeBeginTransValidate
                writeEndTransValidate
                writePostTransValidate

                Server-side upon delete:
                deletePreTransValidate
                deleteBeginTransValidate
                deleteEndTransValidate
                deletePostTransValidate

                *** The rowObjectValidate, createPreTransValidate and writePreTransValidate
                internal procedures are automatically generated by the SDO generator

  Parameters:

  History:
  --------
  (v:010000)    Task:    90000033   UserRef:    POSSE
                Date:   20/04/2001  Author:     Phil Magnay

  Update Notes: Data Logic Procedure Auto-Generation

  (v:010001)    Task:    90000119   UserRef:    posse
                Date:   06/05/2001  Author:     Haavard Danielsen

  Update Notes: Point to src/adm2/logic.i

---------------------------------------------------------------------------------*/
/*                   This .W file was created with the Progress UIB.             */
/*-------------------------------------------------------------------------------*/

/* ***************************  Definitions  ************************** */
/* MIP-GET-OBJECT-VERSION pre-processors
   The following pre-processors are maintained automatically when the object is
   saved. They pull the object and version from Roundtable if possible so that it
   can be displayed in the about window of the container */

&scop object-name       gsmndlogcp.p
DEFINE VARIABLE lv_this_object_name AS CHARACTER INITIAL "{&object-name}":U NO-UNDO.
&scop object-version    000000

/* Astra object identifying preprocessor */
&glob   AstraPlip    yes

DEFINE VARIABLE cObjectName         AS CHARACTER NO-UNDO.

ASSIGN cObjectName = "{&object-name}":U.

&scop   mip-notify-user-on-plip-close   NO


/* Data Preprocessor Definitions */
&GLOB DATA-LOGIC-TABLE gsm_node
&GLOB DATA-FIELD-DEFS  "af/obj2/gsmndfullo.i"

/* Error handling definitions */
{af/sup2/afcheckerr.i &define-only = YES}

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-PREPROCESSOR-BLOCK 

/* ********************  Preprocessor Definitions  ******************** */

&Scoped-define PROCEDURE-TYPE DataLogicProcedure
&Scoped-define DB-AWARE yes


/* Db-Required definitions. */
&IF DEFINED(DB-REQUIRED) = 0 &THEN
    &GLOBAL-DEFINE DB-REQUIRED TRUE
&ENDIF
&GLOBAL-DEFINE DB-REQUIRED-START   &IF {&DB-REQUIRED} &THEN
&GLOBAL-DEFINE DB-REQUIRED-END     &ENDIF





/* _UIB-PREPROCESSOR-BLOCK-END */
&ANALYZE-RESUME



/* *********************** Procedure Settings ************************ */

&ANALYZE-SUSPEND _PROCEDURE-SETTINGS
/* Settings for THIS-PROCEDURE
   Type: DataLogicProcedure
   Allow: 
   Frames: 0
   Add Fields to: Neither
   Other Settings: CODE-ONLY COMPILE APPSERVER DB-AWARE
 */
&ANALYZE-RESUME _END-PROCEDURE-SETTINGS

/* *************************  Create Window  ************************** */

&ANALYZE-SUSPEND _CREATE-WINDOW
/* DESIGN Window definition (used by the UIB) 
  CREATE WINDOW DataLogicProcedure ASSIGN
         HEIGHT             = 15.91
         WIDTH              = 55.6.
/* END WINDOW DEFINITION */
                                                                        */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _INCLUDED-LIB DataLogicProcedure 
/* ************************* Included-Libraries *********************** */

{src/adm2/logic.i}

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


 


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _MAIN-BLOCK DataLogicProcedure 


/* ***************************  Main Block  ******************************* */

{ry/app/ryplipmain.i}

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


/* **********************  Internal Procedures  *********************** */

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE createPreTransValidate DataLogicProcedure  _DB-REQUIRED
PROCEDURE createPreTransValidate :
/*------------------------------------------------------------------------------
  Purpose:     Procedure used to validate records server-side before the transaction scope upon create
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/

  DEFINE VARIABLE cMessageList    AS CHARACTER    NO-UNDO.
  DEFINE VARIABLE cValueList      AS CHARACTER    NO-UNDO.

  IF CAN-FIND(FIRST gsm_node 
              WHERE gsm_node.node_code = b_gsm_node.node_code) THEN
  DO:
     ASSIGN
        cValueList   = STRING(b_gsm_node.node_code)
        cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                      {af/sup2/aferrortxt.i 'AF' '8' 'gsm_node' '' "'node_code, '" cValueList }.
  END.
  /* ensure parent node is valid */
  IF b_gsm_node.parent_node_obj <> 0 AND 
     b_gsm_node.parent_node_obj <> ? THEN
  IF NOT CAN-FIND(FIRST gsm_node
                  WHERE gsm_node.node_obj = b_gsm_node.parent_node_obj) THEN DO:
    ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE "":U) +
           {af/sup2/aferrortxt.i 'AF' '5' 'gsm_node' 'parent_node_obj' "'parent node'"}.

  END.
  /* ensure that the parent node is not the same as the current node */
  IF b_gsm_node.parent_node_obj <> 0 AND 
     b_gsm_node.parent_node_obj <> ? THEN
  IF CAN-FIND(FIRST gsm_node
              WHERE gsm_node.node_obj  = b_gsm_node.parent_node_obj
              AND   gsm_node.node_code = b_gsm_node.node_code) THEN DO:
    ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE "":U) +
           {af/sup2/aferrortxt.i 'AF' '5' 'gsm_node' 'parent_node_obj' "'parent node'" "'. You can not make the current node the parent node to itself.'"}.

  END.

  ERROR-STATUS:ERROR = NO.
  RETURN cMessageList.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE deletePreTransValidate DataLogicProcedure  _DB-REQUIRED
PROCEDURE deletePreTransValidate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
  DEFINE VARIABLE cMessageList    AS CHARACTER    NO-UNDO.

  /* Check for children */
  IF CAN-FIND(FIRST gsm_node 
              WHERE gsm_node.parent_node_obj = b_gsm_node.node_obj) THEN
  DO:
     ASSIGN
        cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                      {af/sup2/aferrortxt.i 'AF' '101' 'gsm_node' '' "'this node'" "'child nodes'"}.
  END.
  
  ERROR-STATUS:ERROR = NO.
  RETURN cMessageList.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE killPlip DataLogicProcedure 
PROCEDURE killPlip :
/*------------------------------------------------------------------------------
  Purpose:     entry point to instantly kill the plip if it should get lost in memory
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/

  {ry/app/ryplipkill.i}

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE objectDescription DataLogicProcedure 
PROCEDURE objectDescription :
/*------------------------------------------------------------------------------
  Purpose:     Pass out a description of the PLIP, used in Plip temp-table
  Parameters:  <none>
  Notes:       This should be changed manually for each plip
------------------------------------------------------------------------------*/

  DEFINE OUTPUT PARAMETER cDescription AS CHARACTER NO-UNDO.

  ASSIGN cDescription = "Astra 2 gsm_node Data Logic Procedure".

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE plipSetup DataLogicProcedure 
PROCEDURE plipSetup :
/*------------------------------------------------------------------------------
  Purpose:    Run by main-block of PLIP at startup of PLIP
  Parameters: <none>
  Notes:       
------------------------------------------------------------------------------*/

  {ry/app/ryplipsetu.i}  

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE plipShutdown DataLogicProcedure 
PROCEDURE plipShutdown :
/*------------------------------------------------------------------------------
  Purpose:     This procedure will be run just before the calling program 
               terminates
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/

  {ry/app/ryplipshut.i}

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE rowObjectValidate DataLogicProcedure 
PROCEDURE rowObjectValidate :
/*------------------------------------------------------------------------------
  Purpose:     Procedure used to validate RowObject record client-side
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/

  DEFINE VARIABLE cMessageList    AS CHARACTER    NO-UNDO.
  DEFINE VARIABLE cValueList      AS CHARACTER    NO-UNDO.

  IF LENGTH(b_gsm_node.node_code) = 0 OR LENGTH(b_gsm_node.node_code) = ? THEN
    ASSIGN
      cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                    {af/sup2/aferrortxt.i 'AF' '1' 'gsm_node' 'node_code' "'Node Code'"}.

  IF LENGTH(b_gsm_node.node_description) = 0 OR 
     LENGTH(b_gsm_node.node_description) = ? THEN
    ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE "":U) +
                          {af/sup2/aferrortxt.i 'AF' '1' 'gsm_node' 'node_description' "'node description'"}.
  
  IF LENGTH(b_gsm_node.node_label) = 0 OR 
     LENGTH(b_gsm_node.node_label) = ? THEN
    ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE "":U) +
                          {af/sup2/aferrortxt.i 'AF' '1' 'gsm_node' 'node_label' "'node label'"}.
  
  IF LENGTH(b_gsm_node.data_source_type) = 0 OR 
     LENGTH(b_gsm_node.data_source_type) = ? THEN
    ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE "":U) +
                          {af/sup2/aferrortxt.i 'AF' '1' 'gsm_node' 'data_source_type' "'data source type'"}.
  
  IF b_gsm_node.data_source_type = "SDO":U AND
     (LENGTH(b_gsm_node.data_source) = 0 OR 
     LENGTH(b_gsm_node.data_source) = ?) THEN
    ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE "":U) +
                          {af/sup2/aferrortxt.i 'AF' '1' 'gsm_node' 'data_source' "'data source'"}.

 IF b_gsm_node.data_source_type = "PRG":U AND
    (LENGTH(b_gsm_node.data_source) = 0 OR 
    LENGTH(b_gsm_node.data_source) = ?) THEN
   ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE "":U) +
                         {af/sup2/aferrortxt.i 'AF' '1' 'gsm_node' 'data_source' "'extract program'"}.
  
  IF b_gsm_node.data_source_type = "TXT":U AND
     (LENGTH(b_gsm_node.data_source) = 0 OR 
     LENGTH(b_gsm_node.data_source) = ?) THEN
    ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE "":U) +
                          {af/sup2/aferrortxt.i 'AF' '1' 'gsm_node' 'data_source' "'plain text'"}.

 IF b_gsm_node.data_source_type = "MNU":U AND
    (LENGTH(b_gsm_node.data_source) = 0 OR 
    LENGTH(b_gsm_node.data_source) = ?) THEN
   ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE "":U) +
                         {af/sup2/aferrortxt.i 'AF' '1' 'gsm_node' 'data_source' "'menu structure'"}.
  
  IF (b_gsm_node.data_source_type = "SDO":U  OR
      b_gsm_node.data_source_type = "PRG":U) AND 
     (LENGTH(b_gsm_node.primary_sdo) = 0 OR 
      LENGTH(b_gsm_node.primary_sdo) = ?) THEN
      ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE "":U) +
                             {af/sup2/aferrortxt.i 'AF' '1' 'gsm_node' 'primary_sdo' "'primary sdo'" "'The Primary SDO must specified for the Data Source Type selected.'"}.
  
  /* We need a label and substitution fields only if the Nodes are created from and SDO/SBO */
  IF (LENGTH(b_gsm_node.node_text_label_expression) = 0  OR
      LENGTH(b_gsm_node.node_text_label_expression) = ?) AND 
     b_gsm_node.data_source_type = "SDO":U THEN
      ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE "":U) +
                             {af/sup2/aferrortxt.i 'AF' '1' 'gsm_node' 'node_text_label_expression' "'node label expression'" "'You must specify a node label expression string. Default is &1 for one field or &1 - &2 / &3 etc.'"}.
  
  IF (LENGTH(b_gsm_node.label_text_substitution_fields) = 0  OR
      LENGTH(b_gsm_node.label_text_substitution_fields) = ?) AND 
     b_gsm_node.data_source_type = "SDO":U THEN
      ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE "":U) +
                             {af/sup2/aferrortxt.i 'AF' '1' 'gsm_node' 'label_text_substitution_fields' "'label substitution field(s)'" "'You must specify at least one field to be used as a display field for this tree node.'"}.
  IF (LENGTH(b_gsm_node.node_text_label_expression) = 0 AND 
      b_gsm_node.data_source_type = "SDO":U AND
      LENGTH(b_gsm_node.label_text_substitution_fields) <> 0) OR
     (LENGTH(b_gsm_node.node_text_label_expression) <> 0 AND 
      NUM-ENTRIES(b_gsm_node.label_text_substitution_fields) <> (NUM-ENTRIES(b_gsm_node.node_text_label_expression,"&":U) - 1)) THEN
      ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE "":U) +
                             {af/sup2/aferrortxt.i 'AF' '5' 'gsm_node' 'label_text_substitution_fields' "'label substitution field(s)'" "'The number of fields should be equal to the number of substitutions specified in the Node Label Expression field. There must be one field for every ''&''. Also make sure that the fields are comma-separated.'"}.
  
  IF  b_gsm_node.structured_node = TRUE AND 
      LENGTH(b_gsm_node.parent_node_filter) = 0 OR LENGTH(b_gsm_node.parent_node_filter) = ? THEN
    ASSIGN
     cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                   {af/sup2/aferrortxt.i 'AF' '1' 'gsm_node' 'parent_node_filter' "'parent node filter'"}.
  
  IF  b_gsm_node.structured_node = TRUE AND 
     LENGTH(b_gsm_node.parent_field) = 0 OR LENGTH(b_gsm_node.parent_field) = ? THEN
    ASSIGN
    cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                  {af/sup2/aferrortxt.i 'AF' '1' 'gsm_node' 'parent_field' "'parent field'"}.
  
  IF  b_gsm_node.structured_node = TRUE AND 
     LENGTH(b_gsm_node.child_field) = 0 OR LENGTH(b_gsm_node.child_field) = ? THEN
    ASSIGN
    cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                  {af/sup2/aferrortxt.i 'AF' '1' 'gsm_node' 'child_field' "'child field'"}.

  IF  b_gsm_node.structured_node = TRUE AND 
     LENGTH(b_gsm_node.data_type) = 0 OR LENGTH(b_gsm_node.data_type) = ? THEN
    ASSIGN
    cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                  {af/sup2/aferrortxt.i 'AF' '1' 'gsm_node' 'data_type' "'data type'"}.

  ERROR-STATUS:ERROR = NO.
  RETURN cMessageList.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE writePreTransValidate DataLogicProcedure  _DB-REQUIRED
PROCEDURE writePreTransValidate :
/*------------------------------------------------------------------------------
  Purpose:     Procedure used to validate records server-side before the transaction scope upon write
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/

  DEFINE VARIABLE cMessageList    AS CHARACTER    NO-UNDO.
  DEFINE VARIABLE cValueList      AS CHARACTER    NO-UNDO.

  IF NOT isCreate() AND CAN-FIND(FIRST gsm_node 
              WHERE gsm_node.node_code = b_gsm_node.node_code
                AND ROWID(gsm_node) <> TO-ROWID(ENTRY(1,b_gsm_node.RowIDent))) THEN
  DO:
     ASSIGN
        cValueList   = STRING(b_gsm_node.node_code)
        cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                      {af/sup2/aferrortxt.i 'AF' '8' 'gsm_node' '' "'node_code, '" cValueList }.
  END.

  ERROR-STATUS:ERROR = NO.
  RETURN cMessageList.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

